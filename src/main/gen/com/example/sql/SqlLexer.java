// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Sql.flex

package com.example.sql;

import java.util.Set;
import java.util.HashSet;

import com.intellij.lexer.FlexLexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import com.example.sql.psi.SqlTypes;


class SqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPRESSION = 2;
  public static final int DIRECTIVE = 4;
  public static final int BLOCK_COMMENT = 6;
  public static final int PARSER_LEVEL_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\14\u1f00\2\u0100\1\u7b00"+
    "\5\u1f00\23\u0100\1\u7c00\17\u0100\1\u7d00\u0adc\u1f00\1\u7e00\1\u7f00"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\12\26\1\27\1\30\1\31\1\32\1\33\1\6\1\34"+
    "\1\12\1\35\1\12\1\35\1\12\1\35\5\12\1\36"+
    "\5\12\1\37\10\12\3\6\1\40\1\12\1\6\1\41"+
    "\2\12\1\42\1\43\1\44\2\12\1\45\2\12\1\46"+
    "\1\12\1\47\1\50\1\51\1\12\1\52\1\53\1\54"+
    "\1\55\1\12\1\56\1\57\2\12\1\6\1\60\2\6"+
    "\6\0\1\61\32\0\2\6\4\12\4\6\1\12\2\6"+
    "\1\0\7\6\1\12\4\6\1\12\5\6\27\12\1\6"+
    "\37\12\1\6\u01ca\12\4\6\14\12\16\6\5\12\7\6"+
    "\1\12\1\6\1\12\21\6\160\0\5\12\1\6\2\12"+
    "\2\6\4\12\1\6\1\12\6\6\1\12\1\6\3\12"+
    "\1\6\1\12\1\6\24\12\1\6\123\12\1\6\213\12"+
    "\1\6\5\0\2\6\246\12\1\6\46\12\2\6\1\12"+
    "\6\6\51\12\6\6\1\12\1\6\55\0\1\6\1\0"+
    "\1\6\2\0\1\6\2\0\1\6\1\0\10\6\33\12"+
    "\4\6\4\12\15\6\6\0\5\6\1\12\4\6\13\0"+
    "\1\6\1\0\3\6\53\12\25\0\12\26\4\6\2\12"+
    "\1\0\143\12\1\6\1\12\10\0\1\6\6\0\2\12"+
    "\2\0\1\6\4\0\2\12\12\26\3\12\2\6\1\12"+
    "\17\6\1\0\1\12\1\0\36\12\33\0\2\6\131\12"+
    "\13\0\1\12\16\6\12\26\41\12\11\0\2\12\4\6"+
    "\1\12\2\6\1\0\30\12\4\0\1\12\11\0\1\12"+
    "\3\0\1\12\5\0\22\6\31\12\3\0\4\6\13\12"+
    "\5\6\30\12\1\6\6\12\1\6\2\0\6\6\10\0"+
    "\52\12\72\0\66\12\3\0\1\12\22\0\1\12\7\0"+
    "\12\12\2\0\2\6\12\26\1\6\20\12\3\0\1\6"+
    "\10\12\2\6\2\12\2\6\26\12\1\6\7\12\1\6"+
    "\1\12\3\6\4\12\2\6\1\0\1\12\7\0\2\6"+
    "\2\0\2\6\3\0\1\12\10\6\1\0\4\6\2\12"+
    "\1\6\3\12\2\0\2\6\12\26\4\12\7\6\2\12"+
    "\1\6\1\0\2\6\3\0\1\6\6\12\4\6\2\12"+
    "\2\6\26\12\1\6\7\12\1\6\2\12\1\6\2\12"+
    "\1\6\2\12\2\6\1\0\1\6\5\0\4\6\2\0"+
    "\2\6\3\0\3\6\1\0\7\6\4\12\1\6\1\12"+
    "\7\6\12\26\2\0\3\12\1\0\13\6\3\0\1\6"+
    "\11\12\1\6\3\12\1\6\26\12\1\6\7\12\1\6"+
    "\2\12\1\6\5\12\2\6\1\0\1\12\10\0\1\6"+
    "\3\0\1\6\3\0\2\6\1\12\17\6\2\12\2\0"+
    "\2\6\12\26\1\6\1\12\7\6\1\12\6\0\1\6"+
    "\3\0\1\6\10\12\2\6\2\12\2\6\26\12\1\6"+
    "\7\12\1\6\2\12\1\6\5\12\2\6\1\0\1\12"+
    "\7\0\2\6\2\0\2\6\3\0\7\6\3\0\4\6"+
    "\2\12\1\6\3\12\2\0\2\6\12\26\1\6\1\12"+
    "\20\6\1\0\1\12\1\6\6\12\3\6\3\12\1\6"+
    "\4\12\3\6\2\12\1\6\1\12\1\6\2\12\3\6"+
    "\2\12\3\6\3\12\3\6\14\12\4\6\5\0\3\6"+
    "\3\0\1\6\4\0\2\6\1\12\6\6\1\0\16\6"+
    "\12\26\11\6\1\12\6\6\5\0\10\12\1\6\3\12"+
    "\1\6\27\12\1\6\20\12\2\6\1\0\1\12\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\1\6\3\12"+
    "\2\6\1\12\2\6\2\12\2\0\2\6\12\26\20\6"+
    "\1\12\3\0\1\6\10\12\1\6\3\12\1\6\27\12"+
    "\1\6\12\12\1\6\5\12\2\6\1\0\1\12\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\6\6\2\12"+
    "\1\6\2\12\2\0\2\6\12\26\1\6\2\12\1\0"+
    "\14\6\4\0\11\12\1\6\3\12\1\6\51\12\2\0"+
    "\1\12\7\0\1\6\3\0\1\6\4\0\1\12\5\6"+
    "\3\12\1\0\7\6\3\12\2\0\2\6\12\26\12\6"+
    "\6\12\1\6\3\0\1\6\22\12\3\6\30\12\1\6"+
    "\11\12\1\6\1\12\2\6\7\12\3\6\1\0\4\6"+
    "\6\0\1\6\1\0\1\6\10\0\6\6\12\26\2\6"+
    "\2\0\15\6\60\12\1\0\2\12\7\0\4\6\10\12"+
    "\10\0\1\6\12\26\47\6\2\12\1\6\1\12\1\6"+
    "\5\12\1\6\30\12\1\6\1\12\1\6\12\12\1\0"+
    "\2\12\11\0\1\12\2\6\5\12\1\6\1\12\1\6"+
    "\7\0\1\6\12\26\2\6\4\12\40\6\1\12\27\6"+
    "\2\0\6\6\12\26\13\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\2\0\10\12\1\6\44\12\4\6\24\0"+
    "\1\6\2\0\5\12\13\0\1\6\44\0\11\6\1\0"+
    "\71\6\53\12\24\0\1\12\12\26\6\6\6\12\4\0"+
    "\4\12\3\0\1\12\3\0\2\12\7\0\3\12\4\0"+
    "\15\12\14\0\1\12\1\0\12\26\4\0\2\6\46\12"+
    "\1\6\1\12\5\6\1\12\2\6\53\12\1\6\115\12"+
    "\1\6\4\12\2\6\7\12\1\6\1\12\1\6\4\12"+
    "\2\6\51\12\1\6\4\12\2\6\41\12\1\6\4\12"+
    "\2\6\7\12\1\6\1\12\1\6\4\12\2\6\17\12"+
    "\1\6\71\12\1\6\4\12\2\6\103\12\2\6\3\0"+
    "\40\6\20\12\20\6\126\12\2\6\6\12\3\6\u016c\12"+
    "\2\6\21\12\1\6\32\12\5\6\113\12\3\6\13\12"+
    "\7\6\22\12\4\0\11\6\23\12\3\0\13\6\22\12"+
    "\2\0\14\6\15\12\1\6\3\12\1\6\2\0\14\6"+
    "\64\12\40\0\3\6\1\12\3\6\2\12\1\0\2\6"+
    "\12\26\41\6\5\0\12\26\6\6\131\12\7\6\5\12"+
    "\2\0\42\12\1\0\1\12\5\6\106\12\12\6\37\12"+
    "\1\6\14\0\4\6\14\0\12\6\12\26\36\12\2\6"+
    "\5\12\13\6\54\12\4\6\32\12\6\6\12\26\46\6"+
    "\27\12\5\0\4\6\65\12\12\0\1\6\35\0\2\6"+
    "\1\0\12\26\6\6\12\26\15\6\1\12\10\6\16\0"+
    "\1\6\20\0\61\6\5\0\57\12\21\0\10\12\3\6"+
    "\12\26\21\6\11\0\14\6\3\0\36\12\15\0\2\12"+
    "\12\26\54\12\16\0\14\6\44\12\24\0\10\6\12\26"+
    "\3\6\3\12\12\26\44\12\2\6\11\12\7\6\53\12"+
    "\2\6\3\12\20\6\3\0\1\6\25\0\4\12\1\0"+
    "\6\12\1\0\2\12\3\0\1\12\5\6\300\12\100\0"+
    "\26\12\2\6\6\12\2\6\46\12\2\6\6\12\2\6"+
    "\10\12\1\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\37\12\2\6\65\12\1\6\7\12\1\6\1\12\3\6"+
    "\3\12\1\6\7\12\3\6\4\12\2\6\6\12\4\6"+
    "\15\12\5\6\3\12\1\6\7\12\16\6\5\0\30\6"+
    "\2\3\5\0\20\6\2\12\23\6\1\12\13\6\5\0"+
    "\1\6\12\0\1\6\1\12\15\6\1\12\20\6\15\12"+
    "\3\6\41\12\17\6\15\0\4\6\1\0\3\6\14\0"+
    "\21\6\1\12\4\6\1\12\2\6\12\12\1\6\1\12"+
    "\3\6\5\12\6\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\4\12\1\6\13\12\2\6\4\12\5\6\5\12"+
    "\4\6\1\12\21\6\51\12\u0177\6\345\12\6\6\4\12"+
    "\3\0\2\12\14\6\46\12\1\6\1\12\5\6\1\12"+
    "\2\6\70\12\7\6\1\12\17\6\1\0\27\12\11\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\40\0\57\6\1\12\325\6\3\12\31\6\11\12\6\0"+
    "\1\6\5\12\2\6\5\12\4\6\126\12\2\6\2\0"+
    "\2\6\3\12\1\6\132\12\1\6\4\12\5\6\53\12"+
    "\1\6\136\12\21\6\40\12\60\6\320\12\100\6\215\12"+
    "\103\6\56\12\2\6\15\12\3\6\20\12\12\26\2\12"+
    "\24\6\57\12\1\0\4\6\12\0\1\6\37\12\2\0"+
    "\120\12\2\0\45\6\11\12\2\6\147\12\2\6\100\12"+
    "\5\6\2\12\1\6\1\12\1\6\5\12\30\6\20\12"+
    "\1\0\3\12\1\0\4\12\1\0\27\12\5\0\4\6"+
    "\1\0\13\6\1\12\7\6\64\12\14\6\2\0\62\12"+
    "\22\0\12\6\12\26\6\6\22\0\6\12\3\6\1\12"+
    "\1\6\2\12\1\0\12\26\34\12\10\0\2\6\27\12"+
    "\15\0\14\6\35\12\3\6\4\0\57\12\16\0\16\6"+
    "\1\12\12\26\6\6\5\12\1\0\12\12\12\26\5\12"+
    "\1\6\51\12\16\0\11\6\3\12\1\0\10\12\2\0"+
    "\2\6\12\26\6\6\27\12\3\6\1\12\3\0\62\12"+
    "\1\0\1\12\3\0\2\12\2\0\5\12\2\0\1\12"+
    "\1\0\1\12\30\6\3\12\2\6\13\12\5\0\2\6"+
    "\3\12\2\0\12\6\6\12\2\6\6\12\2\6\6\12"+
    "\11\6\7\12\1\6\7\12\1\6\53\12\1\6\16\12"+
    "\6\6\163\12\10\0\1\6\2\0\2\6\12\26\6\6"+
    "\244\12\14\6\27\12\4\6\61\12\4\6\u0100\62\156\12"+
    "\2\6\152\12\46\6\7\12\14\6\5\12\5\6\1\12"+
    "\1\0\12\12\1\6\15\12\1\6\5\12\1\6\1\12"+
    "\1\6\2\12\1\6\2\12\1\6\154\12\41\6\153\12"+
    "\22\6\100\12\2\6\66\12\50\6\15\12\3\6\20\0"+
    "\20\6\20\0\3\6\2\12\30\6\3\12\31\6\1\12"+
    "\6\6\5\12\1\6\207\12\2\6\1\0\4\6\1\12"+
    "\13\6\12\26\7\6\32\12\4\6\1\12\1\6\32\12"+
    "\13\6\131\12\3\6\6\12\2\6\6\12\2\6\6\12"+
    "\2\6\3\12\3\6\2\12\3\6\2\12\22\6\3\0"+
    "\4\6\14\12\1\6\32\12\1\6\23\12\1\6\2\12"+
    "\1\6\17\12\2\6\16\12\42\6\173\12\105\6\65\12"+
    "\210\6\1\0\202\6\35\12\3\6\61\12\17\6\1\0"+
    "\37\6\40\12\15\6\36\12\5\6\46\12\5\0\5\6"+
    "\36\12\2\6\44\12\4\6\10\12\1\6\5\12\52\6"+
    "\236\12\2\6\12\26\6\6\44\12\4\6\44\12\4\6"+
    "\50\12\10\6\64\12\14\6\13\12\1\6\17\12\1\6"+
    "\7\12\1\6\2\12\1\6\13\12\1\6\17\12\1\6"+
    "\7\12\1\6\2\12\103\6\67\12\11\6\26\12\12\6"+
    "\10\12\30\6\6\12\1\6\52\12\1\6\11\12\105\6"+
    "\6\12\2\6\1\12\1\6\54\12\1\6\2\12\3\6"+
    "\1\12\2\6\27\12\12\6\27\12\11\6\37\12\101\6"+
    "\23\12\1\6\2\12\12\6\26\12\12\6\32\12\106\6"+
    "\70\12\6\6\2\12\100\6\1\12\3\0\1\6\2\0"+
    "\5\6\4\0\4\12\1\6\3\12\1\6\35\12\2\6"+
    "\3\0\4\6\1\0\40\6\35\12\3\6\35\12\43\6"+
    "\10\12\1\6\34\12\2\0\31\6\66\12\12\6\26\12"+
    "\12\6\23\12\15\6\22\12\156\6\111\12\67\6\63\12"+
    "\15\6\63\12\15\6\44\12\4\0\10\6\12\26\u0146\6"+
    "\52\12\1\6\2\0\3\6\2\12\113\6\3\0\35\12"+
    "\12\6\1\12\10\6\26\12\13\0\37\6\22\12\4\0"+
    "\52\6\25\12\33\6\27\12\11\6\3\0\65\12\17\0"+
    "\37\6\12\26\1\0\2\12\2\0\1\12\11\6\4\0"+
    "\55\12\13\0\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\2\6\31\12\7\6\12\26\6\6\3\0\44\12\16\0"+
    "\1\6\12\26\4\6\1\12\2\0\1\12\10\6\43\12"+
    "\1\0\2\6\1\12\11\6\3\0\60\12\16\0\4\12"+
    "\4\6\4\0\1\6\2\0\12\26\1\12\1\6\1\12"+
    "\43\6\22\12\1\6\31\12\14\0\6\6\1\0\2\12"+
    "\1\0\76\6\7\12\1\6\1\12\1\6\4\12\1\6"+
    "\17\12\1\6\12\12\7\6\57\12\14\0\5\6\12\26"+
    "\6\6\4\0\1\6\10\12\2\6\2\12\2\6\26\12"+
    "\1\6\7\12\1\6\2\12\1\6\5\12\1\6\2\0"+
    "\1\12\7\0\2\6\2\0\2\6\3\0\2\6\1\12"+
    "\6\6\1\0\5\6\5\12\2\0\2\6\7\0\3\6"+
    "\5\0\213\6\65\12\22\0\4\12\5\6\12\26\4\6"+
    "\1\0\3\12\36\6\60\12\24\0\2\12\1\6\1\12"+
    "\10\6\12\26\246\6\57\12\7\0\2\6\11\0\27\6"+
    "\4\12\2\0\42\6\60\12\21\0\3\6\1\12\13\6"+
    "\12\26\46\6\53\12\15\0\1\12\7\6\12\26\66\6"+
    "\33\12\2\6\17\0\4\6\12\26\6\6\7\12\271\6"+
    "\54\12\17\0\145\6\100\12\12\26\25\6\10\12\2\6"+
    "\1\12\2\6\10\12\1\6\2\12\1\6\30\12\6\0"+
    "\1\6\2\0\2\6\4\0\1\12\1\0\1\12\2\0"+
    "\14\6\12\0\106\6\10\12\2\6\47\12\7\0\2\6"+
    "\7\0\1\12\1\6\1\12\1\0\33\6\1\12\12\0"+
    "\50\12\7\0\1\12\4\0\10\6\1\0\10\6\1\12"+
    "\13\0\56\12\20\0\3\6\1\12\22\6\111\12\7\6"+
    "\11\12\1\6\45\12\10\0\1\6\10\0\1\12\17\6"+
    "\12\26\30\6\36\12\2\6\26\0\1\6\16\0\111\6"+
    "\7\12\1\6\2\12\1\6\46\12\6\0\3\6\1\0"+
    "\1\6\2\0\1\6\7\0\1\12\1\0\10\6\12\26"+
    "\6\6\6\12\1\6\2\12\1\6\40\12\5\0\1\6"+
    "\2\0\1\6\5\0\1\12\7\6\12\26\u0136\6\23\12"+
    "\4\0\11\6\2\0\1\12\1\0\15\12\1\6\42\12"+
    "\7\0\3\6\5\0\15\6\12\0\126\6\1\12\54\6"+
    "\4\12\37\6\232\12\146\6\157\12\21\6\304\12\u014c\6"+
    "\141\12\17\6\60\12\21\0\6\12\17\0\252\6\107\12"+
    "\271\6\71\12\7\6\37\12\1\6\12\26\6\6\117\12"+
    "\1\6\12\0\6\6\36\12\2\6\5\0\13\6\60\12"+
    "\7\0\11\6\4\12\14\6\12\26\11\6\25\12\5\6"+
    "\23\12\260\6\100\12\200\6\113\12\4\6\1\0\1\12"+
    "\67\0\7\6\4\0\15\12\100\6\2\12\1\6\1\12"+
    "\1\0\13\6\2\0\16\6\370\12\10\6\326\12\52\6"+
    "\11\12\u01e7\6\4\12\1\6\7\12\1\6\2\12\1\6"+
    "\43\12\17\6\1\12\35\6\3\12\2\6\1\12\16\6"+
    "\4\12\10\6\u018c\12\4\6\153\12\5\6\15\12\3\6"+
    "\11\12\7\6\12\12\3\6\2\0\1\6\4\0\134\6"+
    "\56\0\2\6\27\0\u011e\6\5\0\3\6\26\0\2\6"+
    "\7\0\36\6\4\0\224\6\3\0\273\6\125\12\1\6"+
    "\107\12\1\6\2\12\2\6\1\12\2\6\2\12\2\6"+
    "\4\12\1\6\14\12\1\6\1\12\1\6\7\12\1\6"+
    "\101\12\1\6\4\12\2\6\10\12\1\6\7\12\1\6"+
    "\34\12\1\6\4\12\1\6\5\12\1\6\1\12\3\6"+
    "\7\12\1\6\u0154\12\2\6\31\12\1\6\31\12\1\6"+
    "\37\12\1\6\31\12\1\6\37\12\1\6\31\12\1\6"+
    "\37\12\1\6\31\12\1\6\37\12\1\6\31\12\1\6"+
    "\10\12\2\6\62\26\67\0\4\6\62\0\10\6\1\0"+
    "\16\6\1\0\26\6\5\0\1\6\17\0\120\6\37\12"+
    "\6\6\6\12\325\6\7\0\1\6\21\0\2\6\7\0"+
    "\1\6\2\0\1\6\5\0\5\6\76\12\41\6\1\0"+
    "\160\6\55\12\3\6\7\0\7\12\2\6\12\26\4\6"+
    "\1\12\u0141\6\36\12\1\0\21\6\54\12\4\0\12\26"+
    "\5\6\1\12\320\6\34\12\16\0\346\6\7\12\1\6"+
    "\4\12\1\6\2\12\1\6\17\12\1\6\305\12\13\6"+
    "\7\0\51\6\104\12\7\0\1\12\4\6\12\26\u0156\6"+
    "\1\12\117\6\4\12\1\6\33\12\1\6\2\12\1\6"+
    "\1\12\2\6\1\12\1\6\12\12\1\6\4\12\1\6"+
    "\1\12\1\6\1\12\6\6\1\12\4\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\3\12\1\6\2\12\1\6"+
    "\1\12\2\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\2\12\1\6\1\12\2\6"+
    "\4\12\1\6\7\12\1\6\4\12\1\6\4\12\1\6"+
    "\1\12\1\6\12\12\1\6\21\12\5\6\3\12\1\6"+
    "\5\12\1\6\21\12\u0134\6\12\0\6\6\340\12\40\6"+
    "\72\12\6\6\336\12\2\6\u0182\12\16\6\u0131\12\37\6"+
    "\36\12\342\6\113\12\5\6\u0160\12\121\6\1\0\36\6"+
    "\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\4\3\1\4\1\1\1\5\1\6"+
    "\1\5\1\7\1\10\2\5\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\5"+
    "\1\24\1\25\3\7\1\5\1\26\2\5\1\27\1\30"+
    "\1\5\1\0\1\31\1\32\1\33\1\34\1\0\1\35"+
    "\1\36\1\0\1\37\1\0\1\21\1\40\1\41\1\42"+
    "\4\7\1\43\1\44\5\0\1\30\2\32\1\45\1\0"+
    "\1\7\1\46\2\7\6\0\1\47\1\50\4\0\1\51"+
    "\2\0\1\52\1\0\1\53\1\0\1\54\6\0\1\55"+
    "\1\56\2\0\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0132\0\u0264\0\u0297\0\u02ca"+
    "\0\u0132\0\u02fd\0\u0330\0\u0132\0\u0132\0\u0363\0\u0132\0\u0132"+
    "\0\u0132\0\u0132\0\u0132\0\u0396\0\u0132\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0132\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u0132\0\u052e\0\u0363"+
    "\0\u0132\0\u0561\0\u0594\0\u0165\0\u05c7\0\u05fa\0\u0132\0\u0132"+
    "\0\u0297\0\u062d\0\u0132\0\u0660\0\u0132\0\u0693\0\u0132\0\u0132"+
    "\0\u0132\0\u0132\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0132\0\u0132"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u0132\0\u08c4"+
    "\0\u0132\0\u08f7\0\u092a\0\u02ca\0\u095d\0\u0990\0\u09c3\0\u09f6"+
    "\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u02ca\0\u02ca\0\u0af5\0\u0b28"+
    "\0\u0b5b\0\u0b8e\0\u0132\0\u0bc1\0\u0bf4\0\u0132\0\u0c27\0\u0132"+
    "\0\u0c5a\0\u0132\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c"+
    "\0\u0132\0\u0132\0\u0dbf\0\u0df2\0\u0132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\5\6\4\7\1\5\2\7\1\10\5\7\1\11"+
    "\1\7\1\12\1\13\6\7\3\5\1\7\17\5\1\7"+
    "\1\14\1\7\1\15\5\6\1\15\1\16\1\17\1\15"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\15\1\36"+
    "\1\37\1\40\1\41\3\20\1\15\3\20\1\42\2\20"+
    "\1\43\4\20\1\44\3\20\1\45\1\6\2\15\5\6"+
    "\3\15\1\46\1\15\1\47\4\15\1\50\17\15\1\51"+
    "\20\15\1\6\1\15\20\52\1\53\42\52\1\5\11\0"+
    "\1\5\13\0\1\5\6\0\3\5\1\0\17\5\1\0"+
    "\1\5\2\0\5\6\53\0\1\6\64\0\15\54\1\55"+
    "\45\54\23\0\1\56\57\0\1\57\42\0\1\5\11\0"+
    "\1\5\13\0\1\13\6\0\3\5\1\0\17\5\1\0"+
    "\1\5\1\0\1\5\5\6\4\0\1\5\13\0\1\5"+
    "\6\0\3\5\1\0\17\5\1\0\1\14\33\0\1\60"+
    "\30\0\10\61\1\62\52\61\1\20\11\0\1\20\13\0"+
    "\1\20\6\0\3\20\1\0\17\20\1\0\1\20\15\0"+
    "\1\63\46\0\2\64\4\0\53\64\27\0\1\65\61\0"+
    "\1\66\1\0\1\34\6\0\2\67\56\0\1\70\62\0"+
    "\1\71\62\0\1\72\30\0\1\20\11\0\1\20\13\0"+
    "\1\20\6\0\3\20\1\0\1\73\16\20\1\0\1\20"+
    "\1\0\1\20\11\0\1\20\13\0\1\20\6\0\3\20"+
    "\1\0\2\20\1\74\11\20\1\75\2\20\1\0\1\20"+
    "\1\0\1\20\11\0\1\20\13\0\1\20\6\0\3\20"+
    "\1\0\11\20\1\76\5\20\1\0\1\20\61\0\1\77"+
    "\11\0\1\100\33\0\1\101\1\102\1\103\3\0\1\104"+
    "\11\0\20\52\1\105\62\52\1\106\4\52\1\65\35\52"+
    "\15\0\1\54\45\0\2\56\3\107\1\110\53\56\1\107"+
    "\11\0\1\61\67\0\1\111\73\0\1\112\34\0\1\20"+
    "\11\0\1\20\13\0\1\20\6\0\3\20\1\0\5\20"+
    "\1\113\11\20\1\0\1\20\1\0\1\20\11\0\1\20"+
    "\13\0\1\20\6\0\3\20\1\0\15\20\1\114\1\20"+
    "\1\0\1\20\1\0\1\20\11\0\1\20\13\0\1\20"+
    "\6\0\3\20\1\0\5\20\1\115\11\20\1\0\1\20"+
    "\1\0\1\20\11\0\1\20\13\0\1\20\6\0\3\20"+
    "\1\0\14\20\1\116\2\20\1\0\1\20\47\0\1\117"+
    "\1\120\7\0\1\121\53\0\1\122\56\0\1\123\66\0"+
    "\1\124\12\0\20\52\1\106\4\52\1\0\55\52\1\106"+
    "\42\52\2\0\1\107\106\0\1\112\6\0\1\67\25\0"+
    "\1\20\11\0\1\20\13\0\1\20\6\0\3\20\1\0"+
    "\12\20\1\116\4\20\1\0\1\20\1\0\1\20\11\0"+
    "\1\20\13\0\1\20\6\0\3\20\1\0\5\20\1\125"+
    "\11\20\1\0\1\20\1\0\1\20\11\0\1\20\13\0"+
    "\1\20\6\0\3\20\1\0\2\20\1\126\14\20\1\0"+
    "\1\20\54\0\1\127\51\0\1\130\71\0\1\131\63\0"+
    "\1\132\11\0\2\133\1\0\1\133\11\0\3\133\1\0"+
    "\2\133\1\0\1\133\2\0\4\133\3\0\1\133\74\0"+
    "\1\134\54\0\1\135\20\0\2\136\1\0\1\136\11\0"+
    "\3\136\1\0\2\136\1\0\1\136\2\0\4\136\3\0"+
    "\1\136\64\0\1\137\22\0\2\140\1\0\1\140\11\0"+
    "\3\140\1\0\2\140\1\0\1\140\2\0\4\140\3\0"+
    "\1\140\100\0\1\141\6\0\2\142\1\0\1\142\11\0"+
    "\3\142\1\0\2\142\1\0\1\142\2\0\4\142\3\0"+
    "\1\142\5\0\1\143\64\0\1\144\61\0\1\145\60\0"+
    "\1\146\60\0\1\147\61\0\1\150\22\0\2\151\1\0"+
    "\1\151\11\0\3\151\1\0\2\151\1\0\1\151\2\0"+
    "\4\151\3\0\1\151\24\0\2\152\1\0\1\152\11\0"+
    "\3\152\1\0\2\152\1\0\1\152\2\0\4\152\3\0"+
    "\1\152\77\0\1\153\51\0\1\154\20\0\2\155\1\0"+
    "\1\155\11\0\3\155\1\0\2\155\1\0\1\155\2\0"+
    "\4\155\3\0\1\155\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3621];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\1\1\11\5\1\1\11\3\1\1\11\2\1"+
    "\2\11\1\1\5\11\1\1\1\11\3\1\1\11\4\1"+
    "\1\11\2\1\1\11\2\1\1\0\2\1\2\11\1\0"+
    "\1\1\1\11\1\0\1\11\1\0\4\11\4\1\2\11"+
    "\5\0\1\1\1\11\1\1\1\11\1\0\4\1\6\0"+
    "\2\1\4\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  // SQL keywords
  private static final Set<String> KEYWORDS = Set.of(
      "alter",
      "and",
      "asc",
      "by",
      "case",
      "check",
      "create",
      "default",
      "delete",
      "desc",
      "distinct",
      "drop",
      "else",
      "end",
      "exists",
      "foreign",
      "from",
      "full",
      "group",
      "having",
      "in",
      "index",
      "inner",
      "insert",
      "into",
      "is",
      "join",
      "key",
      "left",
      "like",
      "limit",
      "not",
      "null",
      "offset",
      "on",
      "or",
      "order",
      "primary",
      "references",
      "right",
      "select",
      "set",
      "table",
      "then",
      "union",
      "unique",
      "update",
      "values",
      "when",
      "where"
  );

  private static boolean isKeyword(CharSequence word) {
      return KEYWORDS.contains(word.toString().toLowerCase());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return isKeyword(yytext()) ? SqlTypes.KEYWORD : SqlTypes.WORD;
            }
          // fall through
          case 48: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 49: break;
          case 3:
            { return SqlTypes.OTHER;
            }
          // fall through
          case 50: break;
          case 4:
            { return SqlTypes.NUMBER;
            }
          // fall through
          case 51: break;
          case 5:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 52: break;
          case 6:
            { return SqlTypes.EL_NOT;
            }
          // fall through
          case 53: break;
          case 7:
            { return SqlTypes.EL_IDENTIFIER;
            }
          // fall through
          case 54: break;
          case 8:
            { return SqlTypes.EL_PERCENT;
            }
          // fall through
          case 55: break;
          case 9:
            { return SqlTypes.EL_LEFT_PAREN;
            }
          // fall through
          case 56: break;
          case 10:
            { return SqlTypes.EL_RIGHT_PAREN;
            }
          // fall through
          case 57: break;
          case 11:
            { return SqlTypes.EL_ASTERISK;
            }
          // fall through
          case 58: break;
          case 12:
            { return SqlTypes.EL_PLUS;
            }
          // fall through
          case 59: break;
          case 13:
            { return SqlTypes.EL_COMMA;
            }
          // fall through
          case 60: break;
          case 14:
            { return SqlTypes.EL_MINUS;
            }
          // fall through
          case 61: break;
          case 15:
            { return SqlTypes.EL_DOT;
            }
          // fall through
          case 62: break;
          case 16:
            { return SqlTypes.EL_SLASH;
            }
          // fall through
          case 63: break;
          case 17:
            { return SqlTypes.EL_NUMBER;
            }
          // fall through
          case 64: break;
          case 18:
            { return SqlTypes.EL_SEPARATOR;
            }
          // fall through
          case 65: break;
          case 19:
            { return SqlTypes.EL_LT;
            }
          // fall through
          case 66: break;
          case 20:
            { return SqlTypes.EL_GT;
            }
          // fall through
          case 67: break;
          case 21:
            { return SqlTypes.EL_AT_SIGN;
            }
          // fall through
          case 68: break;
          case 22:
            { yybegin(EXPRESSION); return SqlTypes.EL_HASH;
            }
          // fall through
          case 69: break;
          case 23:
            { yybegin(EXPRESSION); return SqlTypes.EL_CARET;
            }
          // fall through
          case 70: break;
          case 24:
            { return SqlTypes.BLOCK_COMMENT_CONTENT;
            }
          // fall through
          case 71: break;
          case 25:
            { return SqlTypes.STRING;
            }
          // fall through
          case 72: break;
          case 26:
            { return SqlTypes.LINE_COMMENT;
            }
          // fall through
          case 73: break;
          case 27:
            { char next = yycharat(yylength());
    if (next == '%' || next == '#' || next == '^') {
        yybegin(DIRECTIVE);
    } else if (next == '@' || next == '"' || next == '\'' || Character.isJavaIdentifierStart(next) || Character.isWhitespace(next)) {
        yybegin(EXPRESSION);
    } else {
        yybegin(BLOCK_COMMENT);
    }
    return SqlTypes.BLOCK_COMMENT_START;
            }
          // fall through
          case 74: break;
          case 28:
            { return SqlTypes.EL_NE;
            }
          // fall through
          case 75: break;
          case 29:
            { return SqlTypes.EL_STRING;
            }
          // fall through
          case 76: break;
          case 30:
            { return SqlTypes.EL_AND;
            }
          // fall through
          case 77: break;
          case 31:
            { yybegin(YYINITIAL); return SqlTypes.BLOCK_COMMENT_END;
            }
          // fall through
          case 78: break;
          case 32:
            { return SqlTypes.EL_LE;
            }
          // fall through
          case 79: break;
          case 33:
            { return SqlTypes.EL_EQ;
            }
          // fall through
          case 80: break;
          case 34:
            { return SqlTypes.EL_GE;
            }
          // fall through
          case 81: break;
          case 35:
            { return SqlTypes.EL_OR;
            }
          // fall through
          case 82: break;
          case 36:
            { yybegin(PARSER_LEVEL_COMMENT); return SqlTypes.EL_PARSER_LEVEL_COMMENT;
            }
          // fall through
          case 83: break;
          case 37:
            { return SqlTypes.EL_CHAR;
            }
          // fall through
          case 84: break;
          case 38:
            { return SqlTypes.EL_NEW;
            }
          // fall through
          case 85: break;
          case 39:
            { return SqlTypes.EL_NULL;
            }
          // fall through
          case 86: break;
          case 40:
            { return SqlTypes.EL_BOOLEAN;
            }
          // fall through
          case 87: break;
          case 41:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(EXPRESSION); return SqlTypes.EL_IF;
            }
          // fall through
          case 88: break;
          case 42:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(EXPRESSION); return SqlTypes.EL_END;
            }
          // fall through
          case 89: break;
          case 43:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { yybegin(EXPRESSION); return SqlTypes.EL_FOR;
            }
          // fall through
          case 90: break;
          case 44:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { yybegin(EXPRESSION); return SqlTypes.EL_ELSE;
            }
          // fall through
          case 91: break;
          case 45:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 7);
            { yybegin(EXPRESSION); return SqlTypes.EL_ELSEIF;
            }
          // fall through
          case 92: break;
          case 46:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 7);
            { yybegin(EXPRESSION); return SqlTypes.EL_EXPAND;
            }
          // fall through
          case 93: break;
          case 47:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 9);
            { yybegin(EXPRESSION); return SqlTypes.EL_POPULATE;
            }
          // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Sql.flex

package com.example.sql;

import java.util.Set;
import java.util.HashSet;

import com.intellij.lexer.FlexLexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import com.example.sql.psi.SqlTypes;


class SqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPRESSION = 2;
  public static final int EXPLICIT_DIRECITVE = 4;
  public static final int BLOCK_COMMENT = 6;
  public static final int PARSER_LEVEL_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\14\u1f00\2\u0100\1\u7b00"+
    "\5\u1f00\23\u0100\1\u7c00\17\u0100\1\u7d00\u0adc\u1f00\1\u7e00\1\u7f00"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\16\0\4\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\12\25"+
    "\1\26\1\5\1\27\1\30\1\31\1\5\1\32\1\11"+
    "\1\33\1\11\1\33\1\11\1\33\5\11\1\34\16\11"+
    "\3\5\1\35\1\11\1\5\1\36\2\11\1\37\1\40"+
    "\1\41\2\11\1\42\2\11\1\43\1\11\1\44\1\45"+
    "\1\46\1\11\1\47\1\50\1\51\1\52\1\11\1\53"+
    "\1\54\2\11\1\5\1\55\2\5\6\0\1\56\32\0"+
    "\2\5\4\11\4\5\1\11\2\5\1\0\7\5\1\11"+
    "\4\5\1\11\5\5\27\11\1\5\37\11\1\5\u01ca\11"+
    "\4\5\14\11\16\5\5\11\7\5\1\11\1\5\1\11"+
    "\21\5\160\0\5\11\1\5\2\11\2\5\4\11\1\5"+
    "\1\11\6\5\1\11\1\5\3\11\1\5\1\11\1\5"+
    "\24\11\1\5\123\11\1\5\213\11\1\5\5\0\2\5"+
    "\246\11\1\5\46\11\2\5\1\11\6\5\51\11\6\5"+
    "\1\11\1\5\55\0\1\5\1\0\1\5\2\0\1\5"+
    "\2\0\1\5\1\0\10\5\33\11\4\5\4\11\15\5"+
    "\6\0\5\5\1\11\4\5\13\0\1\5\1\0\3\5"+
    "\53\11\25\0\12\25\4\5\2\11\1\0\143\11\1\5"+
    "\1\11\10\0\1\5\6\0\2\11\2\0\1\5\4\0"+
    "\2\11\12\25\3\11\2\5\1\11\17\5\1\0\1\11"+
    "\1\0\36\11\33\0\2\5\131\11\13\0\1\11\16\5"+
    "\12\25\41\11\11\0\2\11\4\5\1\11\2\5\1\0"+
    "\30\11\4\0\1\11\11\0\1\11\3\0\1\11\5\0"+
    "\22\5\31\11\3\0\4\5\13\11\5\5\30\11\1\5"+
    "\6\11\1\5\2\0\6\5\10\0\52\11\72\0\66\11"+
    "\3\0\1\11\22\0\1\11\7\0\12\11\2\0\2\5"+
    "\12\25\1\5\20\11\3\0\1\5\10\11\2\5\2\11"+
    "\2\5\26\11\1\5\7\11\1\5\1\11\3\5\4\11"+
    "\2\5\1\0\1\11\7\0\2\5\2\0\2\5\3\0"+
    "\1\11\10\5\1\0\4\5\2\11\1\5\3\11\2\0"+
    "\2\5\12\25\4\11\7\5\2\11\1\5\1\0\2\5"+
    "\3\0\1\5\6\11\4\5\2\11\2\5\26\11\1\5"+
    "\7\11\1\5\2\11\1\5\2\11\1\5\2\11\2\5"+
    "\1\0\1\5\5\0\4\5\2\0\2\5\3\0\3\5"+
    "\1\0\7\5\4\11\1\5\1\11\7\5\12\25\2\0"+
    "\3\11\1\0\13\5\3\0\1\5\11\11\1\5\3\11"+
    "\1\5\26\11\1\5\7\11\1\5\2\11\1\5\5\11"+
    "\2\5\1\0\1\11\10\0\1\5\3\0\1\5\3\0"+
    "\2\5\1\11\17\5\2\11\2\0\2\5\12\25\1\5"+
    "\1\11\7\5\1\11\6\0\1\5\3\0\1\5\10\11"+
    "\2\5\2\11\2\5\26\11\1\5\7\11\1\5\2\11"+
    "\1\5\5\11\2\5\1\0\1\11\7\0\2\5\2\0"+
    "\2\5\3\0\7\5\3\0\4\5\2\11\1\5\3\11"+
    "\2\0\2\5\12\25\1\5\1\11\20\5\1\0\1\11"+
    "\1\5\6\11\3\5\3\11\1\5\4\11\3\5\2\11"+
    "\1\5\1\11\1\5\2\11\3\5\2\11\3\5\3\11"+
    "\3\5\14\11\4\5\5\0\3\5\3\0\1\5\4\0"+
    "\2\5\1\11\6\5\1\0\16\5\12\25\11\5\1\11"+
    "\6\5\5\0\10\11\1\5\3\11\1\5\27\11\1\5"+
    "\20\11\2\5\1\0\1\11\7\0\1\5\3\0\1\5"+
    "\4\0\7\5\2\0\1\5\3\11\2\5\1\11\2\5"+
    "\2\11\2\0\2\5\12\25\20\5\1\11\3\0\1\5"+
    "\10\11\1\5\3\11\1\5\27\11\1\5\12\11\1\5"+
    "\5\11\2\5\1\0\1\11\7\0\1\5\3\0\1\5"+
    "\4\0\7\5\2\0\6\5\2\11\1\5\2\11\2\0"+
    "\2\5\12\25\1\5\2\11\1\0\14\5\4\0\11\11"+
    "\1\5\3\11\1\5\51\11\2\0\1\11\7\0\1\5"+
    "\3\0\1\5\4\0\1\11\5\5\3\11\1\0\7\5"+
    "\3\11\2\0\2\5\12\25\12\5\6\11\1\5\3\0"+
    "\1\5\22\11\3\5\30\11\1\5\11\11\1\5\1\11"+
    "\2\5\7\11\3\5\1\0\4\5\6\0\1\5\1\0"+
    "\1\5\10\0\6\5\12\25\2\5\2\0\15\5\60\11"+
    "\1\0\2\11\7\0\4\5\10\11\10\0\1\5\12\25"+
    "\47\5\2\11\1\5\1\11\1\5\5\11\1\5\30\11"+
    "\1\5\1\11\1\5\12\11\1\0\2\11\11\0\1\11"+
    "\2\5\5\11\1\5\1\11\1\5\7\0\1\5\12\25"+
    "\2\5\4\11\40\5\1\11\27\5\2\0\6\5\12\25"+
    "\13\5\1\0\1\5\1\0\1\5\1\0\4\5\2\0"+
    "\10\11\1\5\44\11\4\5\24\0\1\5\2\0\5\11"+
    "\13\0\1\5\44\0\11\5\1\0\71\5\53\11\24\0"+
    "\1\11\12\25\6\5\6\11\4\0\4\11\3\0\1\11"+
    "\3\0\2\11\7\0\3\11\4\0\15\11\14\0\1\11"+
    "\1\0\12\25\4\0\2\5\46\11\1\5\1\11\5\5"+
    "\1\11\2\5\53\11\1\5\115\11\1\5\4\11\2\5"+
    "\7\11\1\5\1\11\1\5\4\11\2\5\51\11\1\5"+
    "\4\11\2\5\41\11\1\5\4\11\2\5\7\11\1\5"+
    "\1\11\1\5\4\11\2\5\17\11\1\5\71\11\1\5"+
    "\4\11\2\5\103\11\2\5\3\0\40\5\20\11\20\5"+
    "\126\11\2\5\6\11\3\5\u016c\11\2\5\21\11\1\5"+
    "\32\11\5\5\113\11\3\5\13\11\7\5\22\11\4\0"+
    "\11\5\23\11\3\0\13\5\22\11\2\0\14\5\15\11"+
    "\1\5\3\11\1\5\2\0\14\5\64\11\40\0\3\5"+
    "\1\11\3\5\2\11\1\0\2\5\12\25\41\5\5\0"+
    "\12\25\6\5\131\11\7\5\5\11\2\0\42\11\1\0"+
    "\1\11\5\5\106\11\12\5\37\11\1\5\14\0\4\5"+
    "\14\0\12\5\12\25\36\11\2\5\5\11\13\5\54\11"+
    "\4\5\32\11\6\5\12\25\46\5\27\11\5\0\4\5"+
    "\65\11\12\0\1\5\35\0\2\5\1\0\12\25\6\5"+
    "\12\25\15\5\1\11\10\5\16\0\1\5\20\0\61\5"+
    "\5\0\57\11\21\0\10\11\3\5\12\25\21\5\11\0"+
    "\14\5\3\0\36\11\15\0\2\11\12\25\54\11\16\0"+
    "\14\5\44\11\24\0\10\5\12\25\3\5\3\11\12\25"+
    "\44\11\2\5\11\11\7\5\53\11\2\5\3\11\20\5"+
    "\3\0\1\5\25\0\4\11\1\0\6\11\1\0\2\11"+
    "\3\0\1\11\5\5\300\11\100\0\26\11\2\5\6\11"+
    "\2\5\46\11\2\5\6\11\2\5\10\11\1\5\1\11"+
    "\1\5\1\11\1\5\1\11\1\5\37\11\2\5\65\11"+
    "\1\5\7\11\1\5\1\11\3\5\3\11\1\5\7\11"+
    "\3\5\4\11\2\5\6\11\4\5\15\11\5\5\3\11"+
    "\1\5\7\11\16\5\5\0\30\5\2\3\5\0\20\5"+
    "\2\11\23\5\1\11\13\5\5\0\1\5\12\0\1\5"+
    "\1\11\15\5\1\11\20\5\15\11\3\5\41\11\17\5"+
    "\15\0\4\5\1\0\3\5\14\0\21\5\1\11\4\5"+
    "\1\11\2\5\12\11\1\5\1\11\3\5\5\11\6\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\4\11\1\5"+
    "\13\11\2\5\4\11\5\5\5\11\4\5\1\11\21\5"+
    "\51\11\u0177\5\345\11\6\5\4\11\3\0\2\11\14\5"+
    "\46\11\1\5\1\11\5\5\1\11\2\5\70\11\7\5"+
    "\1\11\17\5\1\0\27\11\11\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\40\0\57\5\1\11"+
    "\325\5\3\11\31\5\11\11\6\0\1\5\5\11\2\5"+
    "\5\11\4\5\126\11\2\5\2\0\2\5\3\11\1\5"+
    "\132\11\1\5\4\11\5\5\53\11\1\5\136\11\21\5"+
    "\40\11\60\5\320\11\100\5\215\11\103\5\56\11\2\5"+
    "\15\11\3\5\20\11\12\25\2\11\24\5\57\11\1\0"+
    "\4\5\12\0\1\5\37\11\2\0\120\11\2\0\45\5"+
    "\11\11\2\5\147\11\2\5\100\11\5\5\2\11\1\5"+
    "\1\11\1\5\5\11\30\5\20\11\1\0\3\11\1\0"+
    "\4\11\1\0\27\11\5\0\4\5\1\0\13\5\1\11"+
    "\7\5\64\11\14\5\2\0\62\11\22\0\12\5\12\25"+
    "\6\5\22\0\6\11\3\5\1\11\1\5\2\11\1\0"+
    "\12\25\34\11\10\0\2\5\27\11\15\0\14\5\35\11"+
    "\3\5\4\0\57\11\16\0\16\5\1\11\12\25\6\5"+
    "\5\11\1\0\12\11\12\25\5\11\1\5\51\11\16\0"+
    "\11\5\3\11\1\0\10\11\2\0\2\5\12\25\6\5"+
    "\27\11\3\5\1\11\3\0\62\11\1\0\1\11\3\0"+
    "\2\11\2\0\5\11\2\0\1\11\1\0\1\11\30\5"+
    "\3\11\2\5\13\11\5\0\2\5\3\11\2\0\12\5"+
    "\6\11\2\5\6\11\2\5\6\11\11\5\7\11\1\5"+
    "\7\11\1\5\53\11\1\5\16\11\6\5\163\11\10\0"+
    "\1\5\2\0\2\5\12\25\6\5\244\11\14\5\27\11"+
    "\4\5\61\11\4\5\u0100\57\156\11\2\5\152\11\46\5"+
    "\7\11\14\5\5\11\5\5\1\11\1\0\12\11\1\5"+
    "\15\11\1\5\5\11\1\5\1\11\1\5\2\11\1\5"+
    "\2\11\1\5\154\11\41\5\153\11\22\5\100\11\2\5"+
    "\66\11\50\5\15\11\3\5\20\0\20\5\20\0\3\5"+
    "\2\11\30\5\3\11\31\5\1\11\6\5\5\11\1\5"+
    "\207\11\2\5\1\0\4\5\1\11\13\5\12\25\7\5"+
    "\32\11\4\5\1\11\1\5\32\11\13\5\131\11\3\5"+
    "\6\11\2\5\6\11\2\5\6\11\2\5\3\11\3\5"+
    "\2\11\3\5\2\11\22\5\3\0\4\5\14\11\1\5"+
    "\32\11\1\5\23\11\1\5\2\11\1\5\17\11\2\5"+
    "\16\11\42\5\173\11\105\5\65\11\210\5\1\0\202\5"+
    "\35\11\3\5\61\11\17\5\1\0\37\5\40\11\15\5"+
    "\36\11\5\5\46\11\5\0\5\5\36\11\2\5\44\11"+
    "\4\5\10\11\1\5\5\11\52\5\236\11\2\5\12\25"+
    "\6\5\44\11\4\5\44\11\4\5\50\11\10\5\64\11"+
    "\14\5\13\11\1\5\17\11\1\5\7\11\1\5\2\11"+
    "\1\5\13\11\1\5\17\11\1\5\7\11\1\5\2\11"+
    "\103\5\67\11\11\5\26\11\12\5\10\11\30\5\6\11"+
    "\1\5\52\11\1\5\11\11\105\5\6\11\2\5\1\11"+
    "\1\5\54\11\1\5\2\11\3\5\1\11\2\5\27\11"+
    "\12\5\27\11\11\5\37\11\101\5\23\11\1\5\2\11"+
    "\12\5\26\11\12\5\32\11\106\5\70\11\6\5\2\11"+
    "\100\5\1\11\3\0\1\5\2\0\5\5\4\0\4\11"+
    "\1\5\3\11\1\5\35\11\2\5\3\0\4\5\1\0"+
    "\40\5\35\11\3\5\35\11\43\5\10\11\1\5\34\11"+
    "\2\0\31\5\66\11\12\5\26\11\12\5\23\11\15\5"+
    "\22\11\156\5\111\11\67\5\63\11\15\5\63\11\15\5"+
    "\44\11\4\0\10\5\12\25\u0146\5\52\11\1\5\2\0"+
    "\3\5\2\11\113\5\3\0\35\11\12\5\1\11\10\5"+
    "\26\11\13\0\37\5\22\11\4\0\52\5\25\11\33\5"+
    "\27\11\11\5\3\0\65\11\17\0\37\5\12\25\1\0"+
    "\2\11\2\0\1\11\11\5\4\0\55\11\13\0\2\5"+
    "\1\0\4\5\1\0\12\5\1\0\2\5\31\11\7\5"+
    "\12\25\6\5\3\0\44\11\16\0\1\5\12\25\4\5"+
    "\1\11\2\0\1\11\10\5\43\11\1\0\2\5\1\11"+
    "\11\5\3\0\60\11\16\0\4\11\4\5\4\0\1\5"+
    "\2\0\12\25\1\11\1\5\1\11\43\5\22\11\1\5"+
    "\31\11\14\0\6\5\1\0\2\11\1\0\76\5\7\11"+
    "\1\5\1\11\1\5\4\11\1\5\17\11\1\5\12\11"+
    "\7\5\57\11\14\0\5\5\12\25\6\5\4\0\1\5"+
    "\10\11\2\5\2\11\2\5\26\11\1\5\7\11\1\5"+
    "\2\11\1\5\5\11\1\5\2\0\1\11\7\0\2\5"+
    "\2\0\2\5\3\0\2\5\1\11\6\5\1\0\5\5"+
    "\5\11\2\0\2\5\7\0\3\5\5\0\213\5\65\11"+
    "\22\0\4\11\5\5\12\25\4\5\1\0\3\11\36\5"+
    "\60\11\24\0\2\11\1\5\1\11\10\5\12\25\246\5"+
    "\57\11\7\0\2\5\11\0\27\5\4\11\2\0\42\5"+
    "\60\11\21\0\3\5\1\11\13\5\12\25\46\5\53\11"+
    "\15\0\1\11\7\5\12\25\66\5\33\11\2\5\17\0"+
    "\4\5\12\25\6\5\7\11\271\5\54\11\17\0\145\5"+
    "\100\11\12\25\25\5\10\11\2\5\1\11\2\5\10\11"+
    "\1\5\2\11\1\5\30\11\6\0\1\5\2\0\2\5"+
    "\4\0\1\11\1\0\1\11\2\0\14\5\12\0\106\5"+
    "\10\11\2\5\47\11\7\0\2\5\7\0\1\11\1\5"+
    "\1\11\1\0\33\5\1\11\12\0\50\11\7\0\1\11"+
    "\4\0\10\5\1\0\10\5\1\11\13\0\56\11\20\0"+
    "\3\5\1\11\22\5\111\11\7\5\11\11\1\5\45\11"+
    "\10\0\1\5\10\0\1\11\17\5\12\25\30\5\36\11"+
    "\2\5\26\0\1\5\16\0\111\5\7\11\1\5\2\11"+
    "\1\5\46\11\6\0\3\5\1\0\1\5\2\0\1\5"+
    "\7\0\1\11\1\0\10\5\12\25\6\5\6\11\1\5"+
    "\2\11\1\5\40\11\5\0\1\5\2\0\1\5\5\0"+
    "\1\11\7\5\12\25\u0136\5\23\11\4\0\11\5\2\0"+
    "\1\11\1\0\15\11\1\5\42\11\7\0\3\5\5\0"+
    "\15\5\12\0\126\5\1\11\54\5\4\11\37\5\232\11"+
    "\146\5\157\11\21\5\304\11\u014c\5\141\11\17\5\60\11"+
    "\21\0\6\11\17\0\252\5\107\11\271\5\71\11\7\5"+
    "\37\11\1\5\12\25\6\5\117\11\1\5\12\0\6\5"+
    "\36\11\2\5\5\0\13\5\60\11\7\0\11\5\4\11"+
    "\14\5\12\25\11\5\25\11\5\5\23\11\260\5\100\11"+
    "\200\5\113\11\4\5\1\0\1\11\67\0\7\5\4\0"+
    "\15\11\100\5\2\11\1\5\1\11\1\0\13\5\2\0"+
    "\16\5\370\11\10\5\326\11\52\5\11\11\u01e7\5\4\11"+
    "\1\5\7\11\1\5\2\11\1\5\43\11\17\5\1\11"+
    "\35\5\3\11\2\5\1\11\16\5\4\11\10\5\u018c\11"+
    "\4\5\153\11\5\5\15\11\3\5\11\11\7\5\12\11"+
    "\3\5\2\0\1\5\4\0\134\5\56\0\2\5\27\0"+
    "\u011e\5\5\0\3\5\26\0\2\5\7\0\36\5\4\0"+
    "\224\5\3\0\273\5\125\11\1\5\107\11\1\5\2\11"+
    "\2\5\1\11\2\5\2\11\2\5\4\11\1\5\14\11"+
    "\1\5\1\11\1\5\7\11\1\5\101\11\1\5\4\11"+
    "\2\5\10\11\1\5\7\11\1\5\34\11\1\5\4\11"+
    "\1\5\5\11\1\5\1\11\3\5\7\11\1\5\u0154\11"+
    "\2\5\31\11\1\5\31\11\1\5\37\11\1\5\31\11"+
    "\1\5\37\11\1\5\31\11\1\5\37\11\1\5\31\11"+
    "\1\5\37\11\1\5\31\11\1\5\10\11\2\5\62\25"+
    "\67\0\4\5\62\0\10\5\1\0\16\5\1\0\26\5"+
    "\5\0\1\5\17\0\120\5\37\11\6\5\6\11\325\5"+
    "\7\0\1\5\21\0\2\5\7\0\1\5\2\0\1\5"+
    "\5\0\5\5\76\11\41\5\1\0\160\5\55\11\3\5"+
    "\7\0\7\11\2\5\12\25\4\5\1\11\u0141\5\36\11"+
    "\1\0\21\5\54\11\4\0\12\25\5\5\1\11\320\5"+
    "\34\11\16\0\346\5\7\11\1\5\4\11\1\5\2\11"+
    "\1\5\17\11\1\5\305\11\13\5\7\0\51\5\104\11"+
    "\7\0\1\11\4\5\12\25\u0156\5\1\11\117\5\4\11"+
    "\1\5\33\11\1\5\2\11\1\5\1\11\2\5\1\11"+
    "\1\5\12\11\1\5\4\11\1\5\1\11\1\5\1\11"+
    "\6\5\1\11\4\5\1\11\1\5\1\11\1\5\1\11"+
    "\1\5\3\11\1\5\2\11\1\5\1\11\2\5\1\11"+
    "\1\5\1\11\1\5\1\11\1\5\1\11\1\5\1\11"+
    "\1\5\2\11\1\5\1\11\2\5\4\11\1\5\7\11"+
    "\1\5\4\11\1\5\4\11\1\5\1\11\1\5\12\11"+
    "\1\5\21\11\5\5\3\11\1\5\5\11\1\5\21\11"+
    "\u0134\5\12\0\6\5\340\11\40\5\72\11\6\5\336\11"+
    "\2\5\u0182\11\16\5\u0131\11\37\5\36\11\342\5\113\11"+
    "\5\5\u0160\11\121\5\1\0\36\5\140\0\200\5\360\0"+
    "\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\4\3\1\4\1\1\1\5\1\6"+
    "\1\5\1\7\1\10\2\5\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\5"+
    "\1\24\1\25\3\7\1\5\1\26\2\5\1\27\1\30"+
    "\1\5\1\0\1\31\1\32\1\33\1\34\1\0\1\35"+
    "\1\36\1\0\1\37\1\0\1\21\1\40\1\41\1\42"+
    "\4\7\1\43\1\44\5\0\1\30\2\32\1\45\1\0"+
    "\1\7\1\46\2\7\4\0\1\47\1\0\1\50\1\51"+
    "\1\0\1\52\1\0\1\53\1\0\1\54\5\0\1\55"+
    "\1\56\2\0\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0120\0\u0240\0\u0270\0\u02a0"+
    "\0\u0120\0\u02d0\0\u0300\0\u0120\0\u0120\0\u0330\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u0360\0\u0120\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0120\0\u0420\0\u0450\0\u0480\0\u04b0\0\u0120\0\u04e0\0\u0330"+
    "\0\u0120\0\u0510\0\u0540\0\u0150\0\u0570\0\u05a0\0\u0120\0\u0120"+
    "\0\u0270\0\u05d0\0\u0120\0\u0600\0\u0120\0\u0630\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0120\0\u0120"+
    "\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0120\0\u0840"+
    "\0\u0120\0\u0870\0\u08a0\0\u02a0\0\u08d0\0\u0900\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u0120\0\u09f0\0\u02a0\0\u02a0\0\u0a20\0\u0120"+
    "\0\u0a50\0\u0120\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70"+
    "\0\u0ba0\0\u0120\0\u0120\0\u0bd0\0\u0c00\0\u0120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\4\6\4\7\1\5\2\7\1\10\5\7\1\11"+
    "\1\7\1\12\1\13\5\7\2\5\1\7\17\5\1\7"+
    "\1\14\1\0\1\15\4\6\1\15\1\16\1\17\1\15"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\2\20\1\15\3\20\1\42\2\20\1\43"+
    "\4\20\1\44\3\20\1\45\1\6\2\15\4\6\3\15"+
    "\1\46\1\15\1\47\4\15\1\50\15\15\1\51\20\15"+
    "\1\6\1\15\17\52\1\53\40\52\1\5\10\0\1\5"+
    "\13\0\1\5\5\0\2\5\1\0\17\5\1\0\1\5"+
    "\2\0\4\6\51\0\1\6\61\0\14\54\1\55\43\54"+
    "\22\0\1\56\54\0\1\57\40\0\1\5\10\0\1\5"+
    "\13\0\1\13\5\0\2\5\1\0\17\5\1\0\1\5"+
    "\1\0\1\5\4\6\4\0\1\5\13\0\1\5\5\0"+
    "\2\5\1\0\17\5\1\0\1\14\31\0\1\60\27\0"+
    "\7\61\1\62\50\61\1\20\10\0\1\20\13\0\1\20"+
    "\5\0\2\20\1\0\17\20\1\0\1\20\14\0\1\63"+
    "\44\0\2\64\3\0\51\64\26\0\1\65\56\0\1\66"+
    "\1\0\1\34\5\0\2\67\53\0\1\70\57\0\1\71"+
    "\57\0\1\72\27\0\1\20\10\0\1\20\13\0\1\20"+
    "\5\0\2\20\1\0\1\73\16\20\1\0\1\20\1\0"+
    "\1\20\10\0\1\20\13\0\1\20\5\0\2\20\1\0"+
    "\2\20\1\74\11\20\1\75\2\20\1\0\1\20\1\0"+
    "\1\20\10\0\1\20\13\0\1\20\5\0\2\20\1\0"+
    "\11\20\1\76\5\20\1\0\1\20\56\0\1\77\10\0"+
    "\1\100\31\0\1\101\1\102\1\103\3\0\1\104\11\0"+
    "\17\52\1\105\57\52\1\106\4\52\1\65\33\52\14\0"+
    "\1\54\43\0\2\56\2\107\1\110\51\56\1\107\10\0"+
    "\1\61\64\0\1\111\70\0\1\112\32\0\1\20\10\0"+
    "\1\20\13\0\1\20\5\0\2\20\1\0\5\20\1\113"+
    "\11\20\1\0\1\20\1\0\1\20\10\0\1\20\13\0"+
    "\1\20\5\0\2\20\1\0\15\20\1\114\1\20\1\0"+
    "\1\20\1\0\1\20\10\0\1\20\13\0\1\20\5\0"+
    "\2\20\1\0\5\20\1\115\11\20\1\0\1\20\1\0"+
    "\1\20\10\0\1\20\13\0\1\20\5\0\2\20\1\0"+
    "\14\20\1\116\2\20\1\0\1\20\44\0\1\117\1\120"+
    "\7\0\1\121\50\0\1\122\53\0\1\123\63\0\1\124"+
    "\12\0\17\52\1\106\4\52\1\0\52\52\1\106\40\52"+
    "\2\0\1\107\102\0\1\112\5\0\1\67\24\0\1\20"+
    "\10\0\1\20\13\0\1\20\5\0\2\20\1\0\12\20"+
    "\1\116\4\20\1\0\1\20\1\0\1\20\10\0\1\20"+
    "\13\0\1\20\5\0\2\20\1\0\5\20\1\125\11\20"+
    "\1\0\1\20\1\0\1\20\10\0\1\20\13\0\1\20"+
    "\5\0\2\20\1\0\2\20\1\126\14\20\1\0\1\20"+
    "\51\0\1\127\46\0\1\130\66\0\1\131\60\0\1\132"+
    "\56\0\1\133\51\0\1\134\55\0\1\135\73\0\1\136"+
    "\47\0\1\137\61\0\1\140\56\0\1\141\55\0\1\142"+
    "\55\0\1\143\56\0\1\144\72\0\1\145\46\0\1\146"+
    "\17\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3120];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\1\1\11\5\1\1\11\3\1\1\11\2\1"+
    "\2\11\1\1\5\11\1\1\1\11\3\1\1\11\4\1"+
    "\1\11\2\1\1\11\2\1\1\0\2\1\2\11\1\0"+
    "\1\1\1\11\1\0\1\11\1\0\4\11\4\1\2\11"+
    "\5\0\1\1\1\11\1\1\1\11\1\0\4\1\4\0"+
    "\1\11\1\0\2\1\1\0\1\11\1\0\1\11\1\0"+
    "\1\1\5\0\2\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  // SQL keywords
  private static final Set<String> KEYWORDS = Set.of(
      "alter",
      "and",
      "asc",
      "by",
      "case",
      "check",
      "create",
      "default",
      "delete",
      "desc",
      "distinct",
      "drop",
      "else",
      "end",
      "exists",
      "foreign",
      "from",
      "full",
      "group",
      "having",
      "in",
      "index",
      "inner",
      "insert",
      "into",
      "is",
      "join",
      "key",
      "left",
      "like",
      "limit",
      "not",
      "null",
      "offset",
      "on",
      "or",
      "order",
      "primary",
      "references",
      "right",
      "select",
      "set",
      "table",
      "then",
      "union",
      "unique",
      "update",
      "values",
      "when",
      "where"
  );

  private static boolean isKeyword(CharSequence word) {
      return KEYWORDS.contains(word.toString().toLowerCase());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return isKeyword(yytext()) ? SqlTypes.KEYWORD : SqlTypes.WORD;
            }
          // fall through
          case 48: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 49: break;
          case 3:
            { return SqlTypes.OTHER;
            }
          // fall through
          case 50: break;
          case 4:
            { return SqlTypes.NUMBER;
            }
          // fall through
          case 51: break;
          case 5:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 52: break;
          case 6:
            { return SqlTypes.EL_NOT;
            }
          // fall through
          case 53: break;
          case 7:
            { return SqlTypes.EL_IDENTIFIER;
            }
          // fall through
          case 54: break;
          case 8:
            { return SqlTypes.EL_PERCENT;
            }
          // fall through
          case 55: break;
          case 9:
            { return SqlTypes.EL_LEFT_PAREN;
            }
          // fall through
          case 56: break;
          case 10:
            { return SqlTypes.EL_RIGHT_PAREN;
            }
          // fall through
          case 57: break;
          case 11:
            { return SqlTypes.EL_ASTERISK;
            }
          // fall through
          case 58: break;
          case 12:
            { return SqlTypes.EL_PLUS;
            }
          // fall through
          case 59: break;
          case 13:
            { return SqlTypes.EL_COMMA;
            }
          // fall through
          case 60: break;
          case 14:
            { return SqlTypes.EL_MINUS;
            }
          // fall through
          case 61: break;
          case 15:
            { return SqlTypes.EL_DOT;
            }
          // fall through
          case 62: break;
          case 16:
            { return SqlTypes.EL_SLASH;
            }
          // fall through
          case 63: break;
          case 17:
            { return SqlTypes.EL_NUMBER;
            }
          // fall through
          case 64: break;
          case 18:
            { return SqlTypes.EL_SEPARATOR;
            }
          // fall through
          case 65: break;
          case 19:
            { return SqlTypes.EL_LT;
            }
          // fall through
          case 66: break;
          case 20:
            { return SqlTypes.EL_GT;
            }
          // fall through
          case 67: break;
          case 21:
            { return SqlTypes.EL_AT_SIGN;
            }
          // fall through
          case 68: break;
          case 22:
            { yybegin(EXPRESSION); return SqlTypes.EL_EMBEDDED;
            }
          // fall through
          case 69: break;
          case 23:
            { yybegin(EXPRESSION); return SqlTypes.EL_LITERAL;
            }
          // fall through
          case 70: break;
          case 24:
            { return SqlTypes.BLOCK_COMMENT_CONTENT;
            }
          // fall through
          case 71: break;
          case 25:
            { return SqlTypes.STRING;
            }
          // fall through
          case 72: break;
          case 26:
            { return SqlTypes.LINE_COMMENT;
            }
          // fall through
          case 73: break;
          case 27:
            { char next = yycharat(yylength());
    if (next == '%' || next == '#' || next == '^') {
        yybegin(EXPLICIT_DIRECITVE);
    } else if (next == '@' || next == '"' || next == '\'' || Character.isJavaIdentifierStart(next) || Character.isWhitespace(next)) {
        yybegin(EXPRESSION);
    } else {
        yybegin(BLOCK_COMMENT);
    }
    return SqlTypes.BLOCK_COMMENT_START;
            }
          // fall through
          case 74: break;
          case 28:
            { return SqlTypes.EL_NE;
            }
          // fall through
          case 75: break;
          case 29:
            { return SqlTypes.EL_STRING;
            }
          // fall through
          case 76: break;
          case 30:
            { return SqlTypes.EL_AND;
            }
          // fall through
          case 77: break;
          case 31:
            { yybegin(YYINITIAL); return SqlTypes.BLOCK_COMMENT_END;
            }
          // fall through
          case 78: break;
          case 32:
            { return SqlTypes.EL_LE;
            }
          // fall through
          case 79: break;
          case 33:
            { return SqlTypes.EL_EQ;
            }
          // fall through
          case 80: break;
          case 34:
            { return SqlTypes.EL_GE;
            }
          // fall through
          case 81: break;
          case 35:
            { return SqlTypes.EL_OR;
            }
          // fall through
          case 82: break;
          case 36:
            { yybegin(PARSER_LEVEL_COMMENT); return SqlTypes.EL_PARSER_LEVEL_COMMENT;
            }
          // fall through
          case 83: break;
          case 37:
            { return SqlTypes.EL_CHAR;
            }
          // fall through
          case 84: break;
          case 38:
            { return SqlTypes.EL_NEW;
            }
          // fall through
          case 85: break;
          case 39:
            { yybegin(EXPRESSION); return SqlTypes.EL_IF;
            }
          // fall through
          case 86: break;
          case 40:
            { return SqlTypes.EL_NULL;
            }
          // fall through
          case 87: break;
          case 41:
            { return SqlTypes.EL_BOOLEAN;
            }
          // fall through
          case 88: break;
          case 42:
            { yybegin(EXPRESSION); return SqlTypes.EL_END;
            }
          // fall through
          case 89: break;
          case 43:
            { yybegin(EXPRESSION); return SqlTypes.EL_FOR;
            }
          // fall through
          case 90: break;
          case 44:
            { yybegin(EXPRESSION); return SqlTypes.EL_ELSE;
            }
          // fall through
          case 91: break;
          case 45:
            { yybegin(EXPRESSION); return SqlTypes.EL_ELSEIF;
            }
          // fall through
          case 92: break;
          case 46:
            { yybegin(EXPRESSION); return SqlTypes.EL_EXPAND;
            }
          // fall through
          case 93: break;
          case 47:
            { yybegin(EXPRESSION); return SqlTypes.EL_POPULATE;
            }
          // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

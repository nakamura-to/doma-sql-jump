// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Directive.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.example.directive;

import java.util.Set;
import java.util.HashSet;

import com.example.directive.psi.DirectiveTypes;

import com.intellij.lexer.FlexLexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import com.example.directive.psi.DirectiveTypes;


class DirectiveLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u1f00"+
    "\1\u5000\1\u5100\1\u5200\1\u5300\3\u0100\1\u5400\1\u5500\1\u5600"+
    "\11\u1f00\1\u5700\4\u0100\1\u5800\17\u1f00\2\u0100\1\u5900\41\u1f00"+
    "\2\u0100\1\u5a00\1\u5b00\2\u1f00\1\u5c00\1\u5d00\27\u0100\1\u5e00"+
    "\2\u0100\1\u5f00\1\u6000\1\u6100\1\u6200\41\u1f00\1\u6300\1\u0100"+
    "\1\u6400\1\u6500\11\u1f00\1\u6600\22\u1f00\1\u6700\1\u1f00\1\u6800"+
    "\1\u6900\1\u1f00\1\u6a00\1\u6b00\1\u6c00\1\u6d00\2\u1f00\1\u6e00"+
    "\4\u1f00\1\u6f00\1\u7000\1\u7100\1\u7200\1\u1f00\1\u7300\2\u1f00"+
    "\1\u7400\1\u7500\1\u7600\2\u1f00\1\u7700\1\u1f00\1\u7800\2\u1f00"+
    "\1\u7900\11\u1f00\1\u7a00\4\u1f00\246\u0100\1\u7b00\20\u0100\1\u7c00"+
    "\1\u7d00\25\u0100\1\u7e00\34\u0100\1\u7f00\14\u1f00\2\u0100\1\u8000"+
    "\5\u1f00\23\u6000\1\u8100\17\u6000\1\u8200\u0adc\u1f00\1\u8300\1\u8400"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\16\0\4\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\3"+
    "\1\15\1\3\1\16\1\3\1\17\11\20\1\21\1\3"+
    "\1\22\1\23\1\24\1\3\1\25\1\26\1\27\1\26"+
    "\1\30\1\26\1\31\5\26\1\32\16\26\1\3\1\33"+
    "\1\3\1\34\1\26\1\3\1\35\2\26\1\36\1\37"+
    "\1\40\2\26\1\41\2\26\1\42\1\26\1\43\1\44"+
    "\1\45\1\26\1\46\1\47\1\50\1\51\2\26\1\52"+
    "\2\26\1\3\1\53\2\3\6\0\1\54\32\0\2\3"+
    "\4\7\4\3\1\26\2\3\1\0\7\3\1\26\4\3"+
    "\1\26\5\3\27\26\1\3\37\26\1\3\u01ca\26\4\3"+
    "\14\26\16\3\5\26\7\3\1\26\1\3\1\26\21\3"+
    "\160\55\5\26\1\3\2\26\2\3\4\26\1\3\1\26"+
    "\6\3\1\26\1\3\3\26\1\3\1\26\1\3\24\26"+
    "\1\3\123\26\1\3\213\26\1\3\5\55\2\56\246\26"+
    "\1\3\46\26\2\3\1\26\6\3\51\26\6\3\1\7"+
    "\1\3\55\55\1\3\1\55\1\3\2\55\1\3\2\55"+
    "\1\3\1\55\10\3\33\26\4\3\4\26\15\3\6\0"+
    "\5\3\1\7\4\3\13\55\1\3\1\0\3\3\53\26"+
    "\25\55\12\57\4\3\2\26\1\55\143\26\1\3\1\26"+
    "\7\55\1\0\1\3\6\55\2\26\2\55\1\3\4\55"+
    "\2\26\12\57\3\26\2\3\1\26\17\3\1\0\1\26"+
    "\1\55\36\26\33\55\2\3\131\26\13\55\1\26\16\3"+
    "\12\57\41\26\11\55\2\26\4\3\1\26\2\3\1\55"+
    "\2\7\26\26\4\55\1\26\11\55\1\26\3\55\1\26"+
    "\5\55\22\3\31\26\3\55\4\3\13\26\5\3\30\7"+
    "\1\3\6\7\1\3\2\0\6\3\10\0\25\26\1\7"+
    "\10\26\14\7\11\0\17\55\1\0\41\55\66\26\3\55"+
    "\1\26\22\55\1\26\7\55\12\26\2\55\2\3\12\57"+
    "\1\3\20\26\3\55\1\3\10\26\2\3\2\26\2\3"+
    "\26\26\1\3\7\26\1\3\1\26\3\3\4\26\2\3"+
    "\1\55\1\26\7\55\2\3\2\55\2\3\3\55\1\26"+
    "\10\3\1\55\4\3\2\26\1\3\3\26\2\55\2\3"+
    "\12\57\2\26\2\7\7\3\1\7\1\26\1\3\1\55"+
    "\2\3\3\55\1\3\6\26\4\3\2\26\2\3\26\26"+
    "\1\3\7\26\1\3\2\26\1\3\2\26\1\3\2\26"+
    "\2\3\1\55\1\3\5\55\4\3\2\55\2\3\3\55"+
    "\3\3\1\55\7\3\4\26\1\3\1\26\7\3\12\57"+
    "\2\55\3\26\1\55\13\3\3\55\1\3\11\26\1\3"+
    "\3\26\1\3\26\26\1\3\7\26\1\3\2\26\1\3"+
    "\5\26\2\3\1\55\1\26\10\55\1\3\3\55\1\3"+
    "\3\55\2\3\1\26\17\3\2\26\2\55\2\3\12\57"+
    "\1\3\1\7\7\3\1\26\6\55\1\3\3\55\1\3"+
    "\10\26\2\3\2\26\2\3\26\26\1\3\7\26\1\3"+
    "\2\26\1\3\5\26\2\3\1\55\1\26\7\55\2\3"+
    "\2\55\2\3\3\55\7\3\1\0\2\55\4\3\2\26"+
    "\1\3\3\26\2\55\2\3\12\57\1\3\1\26\20\3"+
    "\1\55\1\26\1\3\6\26\3\3\3\26\1\3\4\26"+
    "\3\3\2\26\1\3\1\26\1\3\2\26\3\3\2\26"+
    "\3\3\3\26\3\3\14\26\4\3\5\55\3\3\3\55"+
    "\1\3\4\55\2\3\1\26\6\3\1\55\16\3\12\57"+
    "\11\3\1\7\6\3\5\55\10\26\1\3\3\26\1\3"+
    "\27\26\1\3\20\26\2\3\1\0\1\26\7\55\1\3"+
    "\3\55\1\3\4\55\7\3\2\55\1\3\3\26\2\3"+
    "\1\7\2\3\2\26\2\55\2\3\12\57\20\3\1\26"+
    "\3\55\1\3\10\26\1\3\3\26\1\3\27\26\1\3"+
    "\12\26\1\3\5\26\2\3\1\55\1\26\7\55\1\3"+
    "\3\55\1\3\4\55\7\3\2\55\6\3\1\7\1\26"+
    "\1\3\2\26\2\55\2\3\12\57\1\3\2\26\1\0"+
    "\14\3\4\55\1\7\10\26\1\3\3\26\1\3\51\26"+
    "\2\55\1\26\7\55\1\3\3\55\1\3\4\55\1\26"+
    "\5\3\3\26\1\55\7\3\3\26\2\55\2\3\12\57"+
    "\12\3\6\26\1\3\1\0\2\55\1\3\22\26\3\3"+
    "\30\26\1\3\11\26\1\3\1\26\2\3\7\26\3\3"+
    "\1\55\4\3\6\55\1\3\1\55\1\3\10\55\6\3"+
    "\12\57\2\3\2\55\15\3\60\26\1\55\2\26\7\55"+
    "\4\3\1\7\7\26\10\55\1\3\12\57\47\3\2\26"+
    "\1\3\1\26\1\3\5\26\1\3\30\26\1\3\1\26"+
    "\1\3\12\26\1\55\2\26\11\55\1\26\2\3\5\26"+
    "\1\3\1\26\1\3\6\55\1\0\1\3\12\57\2\3"+
    "\4\26\40\3\1\26\27\3\2\55\6\3\12\57\13\3"+
    "\1\55\1\3\1\55\1\3\1\55\4\3\2\55\10\26"+
    "\1\3\44\26\4\3\24\55\1\3\2\55\5\26\13\55"+
    "\1\3\44\55\11\3\1\55\71\3\53\26\24\55\1\26"+
    "\12\57\6\3\6\26\4\55\4\26\3\55\1\26\3\55"+
    "\2\26\7\55\3\26\4\55\15\26\14\55\1\26\1\55"+
    "\12\57\4\55\2\3\46\26\1\3\1\26\5\3\1\26"+
    "\2\3\53\26\1\3\115\26\1\3\4\26\2\3\7\26"+
    "\1\3\1\26\1\3\4\26\2\3\51\26\1\3\4\26"+
    "\2\3\41\26\1\3\4\26\2\3\7\26\1\3\1\26"+
    "\1\3\4\26\2\3\17\26\1\3\71\26\1\3\4\26"+
    "\2\3\103\26\2\3\3\55\40\3\20\26\20\3\126\26"+
    "\2\3\6\26\3\3\u016c\26\2\3\21\26\1\3\32\26"+
    "\5\3\113\26\3\3\13\26\7\3\15\26\1\7\4\26"+
    "\3\55\1\0\11\3\1\7\22\26\3\55\13\3\22\26"+
    "\2\55\14\3\15\26\1\3\3\26\1\3\2\55\14\3"+
    "\64\26\40\55\3\3\1\26\3\3\1\7\1\26\1\55"+
    "\2\3\12\57\41\3\3\55\2\0\12\57\6\3\131\26"+
    "\7\3\5\26\2\55\42\26\1\55\1\26\5\3\106\26"+
    "\12\3\37\26\1\3\14\55\4\3\14\55\12\3\12\57"+
    "\36\26\2\3\5\26\13\3\54\26\4\3\32\26\6\3"+
    "\12\57\46\3\27\26\5\55\4\3\65\26\12\55\1\3"+
    "\35\55\2\3\1\55\12\57\6\3\12\57\15\3\1\26"+
    "\10\3\16\55\1\56\20\0\61\3\5\55\57\26\21\55"+
    "\7\26\1\7\3\3\12\57\21\3\11\55\14\3\3\55"+
    "\36\26\15\55\2\26\12\57\54\26\16\55\14\3\44\26"+
    "\24\55\10\3\12\57\3\3\3\26\12\57\44\26\2\3"+
    "\11\26\7\3\53\26\2\3\3\26\20\3\3\55\1\3"+
    "\25\55\4\26\1\55\6\26\1\55\2\26\3\55\1\26"+
    "\5\3\300\26\72\55\1\0\5\55\26\26\2\3\6\26"+
    "\2\3\46\26\2\3\6\26\2\3\10\26\1\3\1\26"+
    "\1\3\1\26\1\3\1\26\1\3\37\26\2\3\65\26"+
    "\1\3\7\26\1\3\1\26\3\3\3\26\1\3\7\26"+
    "\3\3\4\26\2\3\6\26\4\3\15\26\5\3\3\26"+
    "\1\3\7\26\16\3\5\0\30\3\2\2\5\0\20\3"+
    "\2\26\23\3\1\26\13\3\5\0\1\3\12\0\1\3"+
    "\1\26\15\3\1\26\20\3\15\26\3\3\41\7\17\3"+
    "\15\55\4\56\1\55\3\56\14\55\21\3\1\26\4\3"+
    "\1\26\2\3\12\26\1\3\1\26\3\3\5\26\6\3"+
    "\1\26\1\3\1\26\1\3\1\26\1\3\4\26\1\3"+
    "\13\26\2\3\4\26\5\3\5\26\4\3\1\26\21\3"+
    "\51\26\u022d\3\64\56\26\3\57\26\1\7\57\26\1\7"+
    "\205\26\6\3\4\26\3\55\2\26\14\3\46\26\1\3"+
    "\1\26\5\3\1\26\2\3\70\26\7\3\1\26\17\3"+
    "\1\55\27\26\11\3\7\26\1\3\7\26\1\3\7\26"+
    "\1\3\7\26\1\3\7\26\1\3\7\26\1\3\7\26"+
    "\1\3\7\26\1\3\40\55\57\3\1\26\325\3\3\26"+
    "\31\3\11\26\6\55\1\3\5\26\2\3\5\26\4\3"+
    "\126\26\2\3\2\55\2\3\3\26\1\3\132\26\1\3"+
    "\4\26\5\3\53\26\1\3\136\26\21\3\33\26\5\7"+
    "\60\3\306\26\12\7\100\3\360\26\20\7\215\26\103\3"+
    "\56\26\2\3\15\26\3\3\20\26\12\57\2\26\24\3"+
    "\57\26\1\55\3\56\1\3\12\55\1\3\37\26\2\55"+
    "\120\26\2\55\45\3\11\26\2\3\147\26\2\3\65\26"+
    "\2\7\5\26\4\7\5\3\2\7\1\3\1\7\1\3"+
    "\5\7\30\3\5\7\13\26\1\55\3\26\1\55\4\26"+
    "\1\55\27\26\5\55\4\3\1\0\13\3\1\7\7\3"+
    "\64\26\14\3\2\55\62\26\22\55\12\3\12\57\6\3"+
    "\22\55\6\26\3\3\1\26\1\3\2\26\1\55\12\57"+
    "\34\26\10\55\2\3\27\26\15\55\14\3\35\26\3\3"+
    "\4\55\57\26\16\55\16\3\1\26\12\57\6\3\5\26"+
    "\1\55\12\26\12\57\5\26\1\3\51\26\16\55\11\3"+
    "\3\26\1\55\10\26\2\55\2\3\12\57\6\3\27\26"+
    "\3\3\1\26\3\55\62\26\1\55\1\26\3\55\2\26"+
    "\2\55\5\26\2\55\1\26\1\55\1\26\30\3\3\26"+
    "\2\3\13\26\5\55\2\3\3\26\2\55\12\3\6\26"+
    "\2\3\6\26\2\3\6\26\11\3\7\26\1\3\7\26"+
    "\1\3\53\26\1\3\14\26\2\7\6\3\163\26\10\55"+
    "\1\3\2\55\2\3\12\57\6\3\244\26\14\3\27\26"+
    "\4\3\61\26\4\3\u0100\60\156\26\2\3\152\26\46\3"+
    "\7\26\14\3\5\26\5\3\1\26\1\55\12\26\1\3"+
    "\15\26\1\3\5\26\1\3\1\26\1\3\2\26\1\3"+
    "\2\26\1\3\154\26\41\3\153\26\22\3\100\26\2\3"+
    "\66\26\50\3\14\26\1\7\3\3\20\55\20\3\20\55"+
    "\3\3\2\26\30\3\3\26\31\3\1\7\6\3\5\26"+
    "\1\3\207\26\2\3\1\0\4\3\1\7\13\3\12\57"+
    "\7\3\32\26\4\3\1\26\1\3\32\26\13\3\131\26"+
    "\3\3\6\26\2\3\6\26\2\3\6\26\2\3\3\26"+
    "\3\3\2\7\3\3\2\7\22\3\3\0\4\3\14\26"+
    "\1\3\32\26\1\3\23\26\1\3\2\26\1\3\17\26"+
    "\2\3\16\26\42\3\173\26\105\3\65\26\210\3\1\55"+
    "\202\3\35\26\3\3\61\26\17\3\1\55\37\3\40\26"+
    "\15\3\36\26\5\3\46\26\5\55\5\3\36\26\2\3"+
    "\44\26\4\3\10\26\1\3\5\26\52\3\236\26\2\3"+
    "\12\57\6\3\44\26\4\3\44\26\4\3\50\26\10\3"+
    "\64\26\14\3\13\7\1\3\17\7\1\3\7\7\1\3"+
    "\2\7\1\3\13\7\1\3\17\7\1\3\7\7\1\3"+
    "\2\7\103\3\67\26\11\3\26\26\12\3\10\26\30\3"+
    "\6\7\1\3\52\7\1\3\11\7\105\3\6\26\2\3"+
    "\1\26\1\3\54\26\1\3\2\26\3\3\1\26\2\3"+
    "\27\26\12\3\27\26\11\3\37\26\101\3\23\26\1\3"+
    "\2\26\12\3\26\26\12\3\32\26\106\3\70\26\6\3"+
    "\2\26\100\3\1\26\3\55\1\3\2\55\5\3\4\55"+
    "\4\26\1\3\3\26\1\3\35\26\2\3\3\55\4\3"+
    "\1\55\40\3\35\26\3\3\35\26\43\3\10\26\1\3"+
    "\34\26\2\55\31\3\66\26\12\3\26\26\12\3\23\26"+
    "\15\3\22\26\156\3\111\26\67\3\63\26\15\3\63\26"+
    "\15\3\44\26\4\55\10\3\12\57\u0146\3\52\7\1\3"+
    "\2\0\3\3\2\7\113\3\3\0\35\26\12\3\1\26"+
    "\10\3\26\26\13\55\37\3\22\7\4\0\52\3\25\7"+
    "\33\3\27\26\11\3\3\55\65\26\17\55\37\3\12\57"+
    "\1\0\2\7\2\0\1\7\11\3\4\55\55\26\13\55"+
    "\2\3\1\0\4\3\1\0\12\3\1\0\2\3\31\26"+
    "\7\3\12\57\6\3\3\55\44\26\16\55\1\3\12\57"+
    "\4\3\1\26\2\55\1\7\10\3\43\26\1\55\2\3"+
    "\1\26\11\3\3\55\60\26\16\55\4\26\4\3\4\55"+
    "\1\3\2\0\12\57\1\26\1\3\1\26\43\3\22\26"+
    "\1\3\31\26\14\55\6\3\1\55\2\7\1\0\76\3"+
    "\7\26\1\3\1\26\1\3\4\26\1\3\17\26\1\3"+
    "\12\26\7\3\57\26\14\55\5\3\12\57\6\3\4\55"+
    "\1\3\10\26\2\3\2\26\2\3\26\26\1\3\7\26"+
    "\1\3\2\26\1\3\5\26\1\3\2\55\1\26\7\55"+
    "\2\3\2\55\2\3\3\55\2\3\1\26\6\3\1\55"+
    "\5\3\5\26\2\55\2\3\7\55\3\3\5\55\213\3"+
    "\65\26\22\55\4\26\5\3\12\57\4\3\1\55\1\26"+
    "\2\7\36\3\60\26\24\55\2\26\1\3\1\26\10\3"+
    "\12\57\246\3\57\26\7\55\2\3\11\55\27\3\4\26"+
    "\2\55\42\3\60\26\21\55\3\3\1\26\13\3\12\57"+
    "\46\3\53\26\15\55\1\26\7\3\12\57\66\3\33\26"+
    "\2\3\17\55\4\3\12\57\6\3\7\7\271\3\54\26"+
    "\17\55\145\3\100\26\12\57\25\3\1\26\7\7\2\3"+
    "\1\7\2\3\10\7\1\3\2\7\1\3\30\7\6\0"+
    "\1\3\2\0\2\3\4\0\1\7\1\0\1\7\2\0"+
    "\14\3\12\0\106\3\10\26\2\3\47\26\7\55\2\3"+
    "\7\55\1\26\1\3\1\26\1\55\33\3\1\26\12\55"+
    "\50\26\7\55\1\26\4\55\10\3\1\55\10\3\1\26"+
    "\13\55\56\26\20\55\3\3\1\26\22\3\20\7\71\26"+
    "\7\3\11\26\1\3\45\26\10\55\1\3\10\55\1\26"+
    "\17\3\12\57\30\3\36\26\2\3\26\55\1\3\16\55"+
    "\111\3\7\26\1\3\2\26\1\3\46\26\6\55\3\3"+
    "\1\55\1\3\2\55\1\3\7\55\1\26\1\55\10\3"+
    "\12\57\6\3\6\26\1\3\2\26\1\3\40\26\5\55"+
    "\1\3\2\55\1\3\5\55\1\26\7\3\12\57\u0136\3"+
    "\23\26\4\55\11\3\2\0\1\7\1\0\15\7\1\3"+
    "\42\7\7\0\3\3\5\0\15\3\12\0\126\3\1\7"+
    "\54\3\4\7\37\3\232\26\146\3\157\26\21\3\304\26"+
    "\u014c\3\141\7\17\3\57\26\1\7\21\0\6\7\17\0"+
    "\252\3\107\26\271\3\71\26\7\3\37\26\1\3\12\57"+
    "\6\3\117\7\1\3\12\0\6\3\36\26\2\3\5\55"+
    "\13\3\60\26\7\55\11\3\4\26\14\3\12\57\11\3"+
    "\25\26\5\3\23\26\260\3\100\26\200\3\113\26\4\3"+
    "\1\55\1\26\67\55\7\3\4\55\15\26\100\3\2\26"+
    "\1\3\1\26\1\0\13\3\2\0\16\3\370\26\10\3"+
    "\363\26\u01e3\7\52\3\11\7\u01e7\3\4\7\1\3\7\7"+
    "\1\3\2\7\1\3\37\26\4\7\17\3\1\7\35\3"+
    "\3\26\2\3\1\7\16\3\4\26\10\3\u018c\26\4\3"+
    "\153\26\5\3\15\26\3\3\11\26\7\3\12\26\3\3"+
    "\2\55\1\3\4\0\134\3\56\0\2\3\27\0\u011e\3"+
    "\5\55\3\3\6\55\10\0\10\55\2\3\7\55\36\3"+
    "\4\55\224\3\3\55\273\3\125\26\1\3\107\26\1\3"+
    "\2\26\2\3\1\26\2\3\2\26\2\3\4\26\1\3"+
    "\14\26\1\3\1\26\1\3\7\26\1\3\101\26\1\3"+
    "\4\26\2\3\10\26\1\3\7\26\1\3\34\26\1\3"+
    "\4\26\1\3\5\26\1\3\1\26\3\3\7\26\1\3"+
    "\u0154\26\2\3\31\26\1\3\31\26\1\3\37\26\1\3"+
    "\31\26\1\3\37\26\1\3\31\26\1\3\37\26\1\3"+
    "\31\26\1\3\37\26\1\3\31\26\1\3\10\26\2\3"+
    "\62\57\67\55\4\3\62\55\10\3\1\55\16\3\1\55"+
    "\26\3\5\55\1\3\17\55\120\3\37\7\6\3\6\7"+
    "\325\3\7\55\1\3\21\55\2\3\7\55\1\3\2\55"+
    "\1\3\5\55\5\3\76\7\41\3\1\0\160\3\55\26"+
    "\3\3\7\55\7\26\2\3\12\57\4\3\1\26\u0141\3"+
    "\36\7\1\0\21\3\54\26\4\55\12\57\5\3\1\7"+
    "\320\3\34\7\16\0\346\3\7\7\1\3\4\7\1\3"+
    "\2\7\1\3\17\7\1\3\305\26\13\3\7\55\51\3"+
    "\104\26\7\55\1\26\4\3\12\57\u0156\3\1\7\117\3"+
    "\4\26\1\3\33\26\1\3\2\26\1\3\1\26\2\3"+
    "\1\26\1\3\12\26\1\3\4\26\1\3\1\26\1\3"+
    "\1\26\6\3\1\26\4\3\1\26\1\3\1\26\1\3"+
    "\1\26\1\3\3\26\1\3\2\26\1\3\1\26\2\3"+
    "\1\26\1\3\1\26\1\3\1\26\1\3\1\26\1\3"+
    "\1\26\1\3\2\26\1\3\1\26\2\3\4\26\1\3"+
    "\7\26\1\3\4\26\1\3\4\26\1\3\1\26\1\3"+
    "\12\26\1\3\21\26\5\3\3\26\1\3\5\26\1\3"+
    "\21\26\164\3\32\56\6\3\32\56\6\3\32\56\u0166\3"+
    "\12\0\6\3\327\26\11\7\40\3\65\26\5\7\6\3"+
    "\336\26\2\3\u0182\26\16\3\u0131\26\37\3\36\26\342\3"+
    "\113\7\5\3\u0160\7\121\3\1\0\36\3\140\0\200\3"+
    "\360\55\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[34048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\3\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\1\1\16\1\17\1\20\3\5\1\1\1\13\1\21"+
    "\1\0\1\22\5\0\1\23\2\0\2\12\1\0\1\24"+
    "\1\25\1\12\1\26\1\27\1\30\1\31\1\0\3\5"+
    "\1\32\1\22\4\0\1\33\1\0\1\34\1\0\1\35"+
    "\3\5\1\0\1\36\1\0\1\37\1\0\1\5\1\40"+
    "\1\41\1\42\2\0\1\43\3\0\1\44\1\45\2\0"+
    "\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\61\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\61\0\61\0\61\0\61\0\u01b9\0\u01ea"+
    "\0\61\0\u021b\0\u024c\0\u027d\0\u02ae\0\61\0\u02df\0\u0310"+
    "\0\u0341\0\u0372\0\u03a3\0\61\0\304\0\61\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\61\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\61\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\61\0\304\0\u0682\0\u06b3"+
    "\0\u06e4\0\u0715\0\61\0\u0746\0\61\0\u02ae\0\61\0\u0777"+
    "\0\u07a8\0\u07d9\0\u080a\0\61\0\u083b\0\61\0\u086c\0\u089d"+
    "\0\365\0\365\0\u08ce\0\u08ff\0\u0930\0\365\0\u0961\0\u0992"+
    "\0\u09c3\0\61\0\61\0\u09f4\0\u0a25\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\5\7\1\2\1\26"+
    "\3\7\1\27\2\7\1\30\4\7\1\31\2\7\1\32"+
    "\1\3\2\2\1\33\1\2\62\0\2\3\51\0\1\3"+
    "\27\0\1\34\35\0\5\35\1\36\25\35\1\37\25\35"+
    "\1\7\6\0\1\7\7\0\2\7\5\0\5\7\2\0"+
    "\16\7\1\0\2\7\1\0\1\7\40\0\1\40\1\41"+
    "\1\42\3\0\1\43\24\0\1\44\47\0\12\45\1\0"+
    "\20\45\1\46\25\45\2\47\1\0\14\47\2\50\33\47"+
    "\1\0\2\47\1\50\17\0\1\51\2\20\6\0\1\52"+
    "\1\53\1\54\1\55\24\0\1\33\24\0\1\56\60\0"+
    "\1\57\60\0\1\60\54\0\2\61\5\0\5\61\2\0"+
    "\16\61\2\0\3\61\1\0\1\7\6\0\1\7\7\0"+
    "\2\7\5\0\5\7\2\0\1\62\15\7\1\0\2\7"+
    "\1\0\1\7\1\0\1\7\6\0\1\7\7\0\2\7"+
    "\5\0\5\7\2\0\14\7\1\63\1\7\1\0\2\7"+
    "\1\0\1\7\1\0\1\7\6\0\1\7\7\0\2\7"+
    "\5\0\5\7\2\0\11\7\1\64\4\7\1\0\2\7"+
    "\1\0\1\7\54\0\1\65\24\0\2\33\11\0\1\55"+
    "\24\0\1\33\1\0\5\35\1\66\25\35\1\37\25\35"+
    "\42\0\1\67\1\70\6\0\1\71\52\0\1\72\54\0"+
    "\1\73\64\0\1\74\26\0\1\75\60\0\1\45\65\0"+
    "\2\47\57\0\2\50\11\0\1\55\24\0\1\33\20\0"+
    "\2\51\6\0\1\52\1\53\1\54\45\0\1\76\2\61"+
    "\4\0\1\77\5\61\2\0\16\61\2\0\3\61\1\0"+
    "\1\7\6\0\1\7\7\0\2\7\5\0\5\7\2\0"+
    "\5\7\1\100\10\7\1\0\2\7\1\0\1\7\1\0"+
    "\1\7\6\0\1\7\7\0\2\7\5\0\5\7\2\0"+
    "\5\7\1\101\10\7\1\0\2\7\1\0\1\7\1\0"+
    "\1\7\6\0\1\7\7\0\2\7\5\0\5\7\2\0"+
    "\14\7\1\102\1\7\1\0\2\7\1\0\1\7\50\0"+
    "\1\103\47\0\1\104\67\0\1\105\61\0\1\106\57\0"+
    "\1\107\13\0\1\7\6\0\1\7\7\0\2\7\5\0"+
    "\5\7\2\0\12\7\1\110\3\7\1\0\2\7\1\0"+
    "\1\7\1\0\1\7\6\0\1\7\7\0\2\7\5\0"+
    "\5\7\2\0\5\7\1\111\10\7\1\0\2\7\1\0"+
    "\1\7\1\0\1\7\6\0\1\7\7\0\2\7\5\0"+
    "\5\7\2\0\2\7\1\112\13\7\1\0\2\7\1\0"+
    "\1\7\40\0\1\113\56\0\1\114\74\0\1\115\7\0"+
    "\1\7\6\0\1\7\7\0\2\7\5\0\5\7\2\0"+
    "\2\7\1\116\13\7\1\0\2\7\1\0\1\7\42\0"+
    "\1\117\62\0\1\120\57\0\1\121\56\0\1\122\56\0"+
    "\1\123\57\0\1\124\73\0\1\125\47\0\1\126\21\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2646];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\4\1\4\11\2\1\1\11"+
    "\4\1\1\11\5\1\1\11\1\0\1\11\5\0\1\11"+
    "\2\0\2\1\1\0\7\11\1\0\3\1\1\11\1\1"+
    "\4\0\1\11\1\0\1\11\1\0\1\11\3\1\1\0"+
    "\1\11\1\0\1\11\1\0\4\1\2\0\1\1\3\0"+
    "\2\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  DirectiveLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 39: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 40: break;
          case 3:
            { return DirectiveTypes.NOT;
            }
          // fall through
          case 41: break;
          case 4:
            { return DirectiveTypes.EMBEDDED;
            }
          // fall through
          case 42: break;
          case 5:
            { return DirectiveTypes.IDENTIFIER;
            }
          // fall through
          case 43: break;
          case 6:
            { return  DirectiveTypes.LEFT_PAREN;
            }
          // fall through
          case 44: break;
          case 7:
            { return  DirectiveTypes.RIGHT_PAREN;
            }
          // fall through
          case 45: break;
          case 8:
            { return  DirectiveTypes.COMMA;
            }
          // fall through
          case 46: break;
          case 9:
            { return  DirectiveTypes.DOT;
            }
          // fall through
          case 47: break;
          case 10:
            { return DirectiveTypes.FLOAT;
            }
          // fall through
          case 48: break;
          case 11:
            { return  DirectiveTypes.INT;
            }
          // fall through
          case 49: break;
          case 12:
            { return DirectiveTypes.FOR_SEPARATOR;
            }
          // fall through
          case 50: break;
          case 13:
            { return DirectiveTypes.LT;
            }
          // fall through
          case 51: break;
          case 14:
            { return DirectiveTypes.GT;
            }
          // fall through
          case 52: break;
          case 15:
            { return DirectiveTypes.AT_SIGN;
            }
          // fall through
          case 53: break;
          case 16:
            { return DirectiveTypes.LITERAL;
            }
          // fall through
          case 54: break;
          case 17:
            { return DirectiveTypes.NE;
            }
          // fall through
          case 55: break;
          case 18:
            { return  DirectiveTypes.STRING;
            }
          // fall through
          case 56: break;
          case 19:
            { return DirectiveTypes.AND;
            }
          // fall through
          case 57: break;
          case 20:
            { return  DirectiveTypes.DECIMAL;
            }
          // fall through
          case 58: break;
          case 21:
            { return DirectiveTypes.DOUBLE;
            }
          // fall through
          case 59: break;
          case 22:
            { return  DirectiveTypes.LONG;
            }
          // fall through
          case 60: break;
          case 23:
            { return DirectiveTypes.LE;
            }
          // fall through
          case 61: break;
          case 24:
            { return DirectiveTypes.EQ;
            }
          // fall through
          case 62: break;
          case 25:
            { return DirectiveTypes.GE;
            }
          // fall through
          case 63: break;
          case 26:
            { return DirectiveTypes.OR;
            }
          // fall through
          case 64: break;
          case 27:
            { return DirectiveTypes.IF;
            }
          // fall through
          case 65: break;
          case 28:
            { return  DirectiveTypes.CHAR;
            }
          // fall through
          case 66: break;
          case 29:
            { return DirectiveTypes.CLASS_REF;
            }
          // fall through
          case 67: break;
          case 30:
            { return DirectiveTypes.END;
            }
          // fall through
          case 68: break;
          case 31:
            { return DirectiveTypes.FOR;
            }
          // fall through
          case 69: break;
          case 32:
            { return DirectiveTypes.NULL;
            }
          // fall through
          case 70: break;
          case 33:
            { return DirectiveTypes.TRUE;
            }
          // fall through
          case 71: break;
          case 34:
            { return DirectiveTypes.ELSE;
            }
          // fall through
          case 72: break;
          case 35:
            { return DirectiveTypes.FALSE;
            }
          // fall through
          case 73: break;
          case 36:
            { return DirectiveTypes.ELSEIF;
            }
          // fall through
          case 74: break;
          case 37:
            { return DirectiveTypes.EXPAND;
            }
          // fall through
          case 75: break;
          case 38:
            { return DirectiveTypes.POPULATE;
            }
          // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
